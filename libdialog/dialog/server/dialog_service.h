/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dialog_service_H
#define dialog_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server/dialog_types.h"

namespace dialog {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class dialog_serviceIf {
 public:
  virtual ~dialog_serviceIf() {}
  virtual int64_t append(const std::string& data) = 0;
  virtual void multi_append(std::vector<int64_t> & _return, const std::vector<std::string> & data) = 0;
  virtual void get(std::string& _return, const int64_t id, const int64_t len) = 0;
  virtual int64_t num_records() = 0;
};

class dialog_serviceIfFactory {
 public:
  typedef dialog_serviceIf Handler;

  virtual ~dialog_serviceIfFactory() {}

  virtual dialog_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dialog_serviceIf* /* handler */) = 0;
};

class dialog_serviceIfSingletonFactory : virtual public dialog_serviceIfFactory {
 public:
  dialog_serviceIfSingletonFactory(const boost::shared_ptr<dialog_serviceIf>& iface) : iface_(iface) {}
  virtual ~dialog_serviceIfSingletonFactory() {}

  virtual dialog_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dialog_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<dialog_serviceIf> iface_;
};

class dialog_serviceNull : virtual public dialog_serviceIf {
 public:
  virtual ~dialog_serviceNull() {}
  int64_t append(const std::string& /* data */) {
    int64_t _return = 0;
    return _return;
  }
  void multi_append(std::vector<int64_t> & /* _return */, const std::vector<std::string> & /* data */) {
    return;
  }
  void get(std::string& /* _return */, const int64_t /* id */, const int64_t /* len */) {
    return;
  }
  int64_t num_records() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _dialog_service_append_args__isset {
  _dialog_service_append_args__isset() : data(false) {}
  bool data :1;
} _dialog_service_append_args__isset;

class dialog_service_append_args {
 public:

  dialog_service_append_args(const dialog_service_append_args&);
  dialog_service_append_args& operator=(const dialog_service_append_args&);
  dialog_service_append_args() : data() {
  }

  virtual ~dialog_service_append_args() throw();
  std::string data;

  _dialog_service_append_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const dialog_service_append_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dialog_service_append_pargs {
 public:


  virtual ~dialog_service_append_pargs() throw();
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_append_result__isset {
  _dialog_service_append_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_result__isset;

class dialog_service_append_result {
 public:

  dialog_service_append_result(const dialog_service_append_result&);
  dialog_service_append_result& operator=(const dialog_service_append_result&);
  dialog_service_append_result() : success(0) {
  }

  virtual ~dialog_service_append_result() throw();
  int64_t success;

  _dialog_service_append_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const dialog_service_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_append_presult__isset {
  _dialog_service_append_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_presult__isset;

class dialog_service_append_presult {
 public:


  virtual ~dialog_service_append_presult() throw();
  int64_t* success;

  _dialog_service_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _dialog_service_multi_append_args__isset {
  _dialog_service_multi_append_args__isset() : data(false) {}
  bool data :1;
} _dialog_service_multi_append_args__isset;

class dialog_service_multi_append_args {
 public:

  dialog_service_multi_append_args(const dialog_service_multi_append_args&);
  dialog_service_multi_append_args& operator=(const dialog_service_multi_append_args&);
  dialog_service_multi_append_args() {
  }

  virtual ~dialog_service_multi_append_args() throw();
  std::vector<std::string>  data;

  _dialog_service_multi_append_args__isset __isset;

  void __set_data(const std::vector<std::string> & val);

  bool operator == (const dialog_service_multi_append_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const dialog_service_multi_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_multi_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dialog_service_multi_append_pargs {
 public:


  virtual ~dialog_service_multi_append_pargs() throw();
  const std::vector<std::string> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_multi_append_result__isset {
  _dialog_service_multi_append_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_multi_append_result__isset;

class dialog_service_multi_append_result {
 public:

  dialog_service_multi_append_result(const dialog_service_multi_append_result&);
  dialog_service_multi_append_result& operator=(const dialog_service_multi_append_result&);
  dialog_service_multi_append_result() {
  }

  virtual ~dialog_service_multi_append_result() throw();
  std::vector<int64_t>  success;

  _dialog_service_multi_append_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const dialog_service_multi_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_multi_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_multi_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_multi_append_presult__isset {
  _dialog_service_multi_append_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_multi_append_presult__isset;

class dialog_service_multi_append_presult {
 public:


  virtual ~dialog_service_multi_append_presult() throw();
  std::vector<int64_t> * success;

  _dialog_service_multi_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _dialog_service_get_args__isset {
  _dialog_service_get_args__isset() : id(false), len(false) {}
  bool id :1;
  bool len :1;
} _dialog_service_get_args__isset;

class dialog_service_get_args {
 public:

  dialog_service_get_args(const dialog_service_get_args&);
  dialog_service_get_args& operator=(const dialog_service_get_args&);
  dialog_service_get_args() : id(0), len(0) {
  }

  virtual ~dialog_service_get_args() throw();
  int64_t id;
  int64_t len;

  _dialog_service_get_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_len(const int64_t val);

  bool operator == (const dialog_service_get_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const dialog_service_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dialog_service_get_pargs {
 public:


  virtual ~dialog_service_get_pargs() throw();
  const int64_t* id;
  const int64_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_get_result__isset {
  _dialog_service_get_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_get_result__isset;

class dialog_service_get_result {
 public:

  dialog_service_get_result(const dialog_service_get_result&);
  dialog_service_get_result& operator=(const dialog_service_get_result&);
  dialog_service_get_result() : success() {
  }

  virtual ~dialog_service_get_result() throw();
  std::string success;

  _dialog_service_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const dialog_service_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_get_presult__isset {
  _dialog_service_get_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_get_presult__isset;

class dialog_service_get_presult {
 public:


  virtual ~dialog_service_get_presult() throw();
  std::string* success;

  _dialog_service_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class dialog_service_num_records_args {
 public:

  dialog_service_num_records_args(const dialog_service_num_records_args&);
  dialog_service_num_records_args& operator=(const dialog_service_num_records_args&);
  dialog_service_num_records_args() {
  }

  virtual ~dialog_service_num_records_args() throw();

  bool operator == (const dialog_service_num_records_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dialog_service_num_records_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_num_records_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dialog_service_num_records_pargs {
 public:


  virtual ~dialog_service_num_records_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_num_records_result__isset {
  _dialog_service_num_records_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_num_records_result__isset;

class dialog_service_num_records_result {
 public:

  dialog_service_num_records_result(const dialog_service_num_records_result&);
  dialog_service_num_records_result& operator=(const dialog_service_num_records_result&);
  dialog_service_num_records_result() : success(0) {
  }

  virtual ~dialog_service_num_records_result() throw();
  int64_t success;

  _dialog_service_num_records_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const dialog_service_num_records_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_num_records_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_num_records_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _dialog_service_num_records_presult__isset {
  _dialog_service_num_records_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_num_records_presult__isset;

class dialog_service_num_records_presult {
 public:


  virtual ~dialog_service_num_records_presult() throw();
  int64_t* success;

  _dialog_service_num_records_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class dialog_serviceClient : virtual public dialog_serviceIf {
 public:
  dialog_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dialog_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t append(const std::string& data);
  void send_append(const std::string& data);
  int64_t recv_append();
  void multi_append(std::vector<int64_t> & _return, const std::vector<std::string> & data);
  void send_multi_append(const std::vector<std::string> & data);
  void recv_multi_append(std::vector<int64_t> & _return);
  void get(std::string& _return, const int64_t id, const int64_t len);
  void send_get(const int64_t id, const int64_t len);
  void recv_get(std::string& _return);
  int64_t num_records();
  void send_num_records();
  int64_t recv_num_records();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class dialog_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<dialog_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dialog_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multi_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_records(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  dialog_serviceProcessor(boost::shared_ptr<dialog_serviceIf> iface) :
    iface_(iface) {
    processMap_["append"] = &dialog_serviceProcessor::process_append;
    processMap_["multi_append"] = &dialog_serviceProcessor::process_multi_append;
    processMap_["get"] = &dialog_serviceProcessor::process_get;
    processMap_["num_records"] = &dialog_serviceProcessor::process_num_records;
  }

  virtual ~dialog_serviceProcessor() {}
};

class dialog_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  dialog_serviceProcessorFactory(const ::boost::shared_ptr< dialog_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< dialog_serviceIfFactory > handlerFactory_;
};

class dialog_serviceMultiface : virtual public dialog_serviceIf {
 public:
  dialog_serviceMultiface(std::vector<boost::shared_ptr<dialog_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dialog_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<dialog_serviceIf> > ifaces_;
  dialog_serviceMultiface() {}
  void add(boost::shared_ptr<dialog_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t append(const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(data);
    }
    return ifaces_[i]->append(data);
  }

  void multi_append(std::vector<int64_t> & _return, const std::vector<std::string> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multi_append(_return, data);
    }
    ifaces_[i]->multi_append(_return, data);
    return;
  }

  void get(std::string& _return, const int64_t id, const int64_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, id, len);
    }
    ifaces_[i]->get(_return, id, len);
    return;
  }

  int64_t num_records() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_records();
    }
    return ifaces_[i]->num_records();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class dialog_serviceConcurrentClient : virtual public dialog_serviceIf {
 public:
  dialog_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dialog_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t append(const std::string& data);
  int32_t send_append(const std::string& data);
  int64_t recv_append(const int32_t seqid);
  void multi_append(std::vector<int64_t> & _return, const std::vector<std::string> & data);
  int32_t send_multi_append(const std::vector<std::string> & data);
  void recv_multi_append(std::vector<int64_t> & _return, const int32_t seqid);
  void get(std::string& _return, const int64_t id, const int64_t len);
  int32_t send_get(const int64_t id, const int64_t len);
  void recv_get(std::string& _return, const int32_t seqid);
  int64_t num_records();
  int32_t send_num_records();
  int64_t recv_num_records(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
