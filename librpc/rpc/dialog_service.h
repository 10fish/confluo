/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dialog_service_H
#define dialog_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dialog_types.h"

namespace dialog { namespace rpc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class dialog_serviceIf {
 public:
  virtual ~dialog_serviceIf() {}

  /**
   * Management ops *
   */
  virtual void register_handler() = 0;
  virtual void deregister_handler() = 0;
  virtual void create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode) = 0;
  virtual void set_current_table(rpc_schema& _return, const std::string& table_name) = 0;
  virtual void add_index(const std::string& field_name, const double bucket_size) = 0;
  virtual void remove_index(const std::string& field_name) = 0;
  virtual void add_filter(const std::string& filter_name, const std::string& filter_expr) = 0;
  virtual void remove_filter(const std::string& filter_name) = 0;
  virtual void add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr) = 0;
  virtual void remove_trigger(const std::string& trigger_name) = 0;

  /**
   * Query ops *
   * 
   * @param data
   */
  virtual int64_t append(const std::string& data) = 0;
  virtual int64_t append_batch(const rpc_record_batch& batch) = 0;
  virtual void read(std::string& _return, const int64_t offset, const int64_t nrecords) = 0;
  virtual void adhoc_filter(rpc_iterator_handle& _return, const std::string& filter_expr) = 0;
  virtual void predef_filter(rpc_iterator_handle& _return, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void combined_filter(rpc_iterator_handle& _return, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void alerts_by_time(rpc_iterator_handle& _return, const int64_t begin_ms, const int64_t end_ms) = 0;
  virtual void get_more(rpc_iterator_handle& _return, const rpc_iterator_descriptor& desc) = 0;
  virtual int64_t num_records() = 0;
};

class dialog_serviceIfFactory {
 public:
  typedef dialog_serviceIf Handler;

  virtual ~dialog_serviceIfFactory() {}

  virtual dialog_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dialog_serviceIf* /* handler */) = 0;
};

class dialog_serviceIfSingletonFactory : virtual public dialog_serviceIfFactory {
 public:
  dialog_serviceIfSingletonFactory(const boost::shared_ptr<dialog_serviceIf>& iface) : iface_(iface) {}
  virtual ~dialog_serviceIfSingletonFactory() {}

  virtual dialog_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dialog_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<dialog_serviceIf> iface_;
};

class dialog_serviceNull : virtual public dialog_serviceIf {
 public:
  virtual ~dialog_serviceNull() {}
  void register_handler() {
    return;
  }
  void deregister_handler() {
    return;
  }
  void create_table(const std::string& /* table_name */, const rpc_schema& /* schema */, const rpc_storage_mode /* mode */) {
    return;
  }
  void set_current_table(rpc_schema& /* _return */, const std::string& /* table_name */) {
    return;
  }
  void add_index(const std::string& /* field_name */, const double /* bucket_size */) {
    return;
  }
  void remove_index(const std::string& /* field_name */) {
    return;
  }
  void add_filter(const std::string& /* filter_name */, const std::string& /* filter_expr */) {
    return;
  }
  void remove_filter(const std::string& /* filter_name */) {
    return;
  }
  void add_trigger(const std::string& /* trigger_name */, const std::string& /* filter_name */, const std::string& /* trigger_expr */) {
    return;
  }
  void remove_trigger(const std::string& /* trigger_name */) {
    return;
  }
  int64_t append(const std::string& /* data */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t append_batch(const rpc_record_batch& /* batch */) {
    int64_t _return = 0;
    return _return;
  }
  void read(std::string& /* _return */, const int64_t /* offset */, const int64_t /* nrecords */) {
    return;
  }
  void adhoc_filter(rpc_iterator_handle& /* _return */, const std::string& /* filter_expr */) {
    return;
  }
  void predef_filter(rpc_iterator_handle& /* _return */, const std::string& /* filter_name */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void combined_filter(rpc_iterator_handle& /* _return */, const std::string& /* filter_name */, const std::string& /* filter_expr */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void alerts_by_time(rpc_iterator_handle& /* _return */, const int64_t /* begin_ms */, const int64_t /* end_ms */) {
    return;
  }
  void get_more(rpc_iterator_handle& /* _return */, const rpc_iterator_descriptor& /* desc */) {
    return;
  }
  int64_t num_records() {
    int64_t _return = 0;
    return _return;
  }
};


class dialog_service_register_handler_args {
 public:

  dialog_service_register_handler_args(const dialog_service_register_handler_args&);
  dialog_service_register_handler_args(dialog_service_register_handler_args&&);
  dialog_service_register_handler_args& operator=(const dialog_service_register_handler_args&);
  dialog_service_register_handler_args& operator=(dialog_service_register_handler_args&&);
  dialog_service_register_handler_args() {
  }

  virtual ~dialog_service_register_handler_args() throw();

  bool operator == (const dialog_service_register_handler_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dialog_service_register_handler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_register_handler_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_register_handler_pargs {
 public:


  virtual ~dialog_service_register_handler_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_register_handler_result__isset {
  _dialog_service_register_handler_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_register_handler_result__isset;

class dialog_service_register_handler_result {
 public:

  dialog_service_register_handler_result(const dialog_service_register_handler_result&);
  dialog_service_register_handler_result(dialog_service_register_handler_result&&);
  dialog_service_register_handler_result& operator=(const dialog_service_register_handler_result&);
  dialog_service_register_handler_result& operator=(dialog_service_register_handler_result&&);
  dialog_service_register_handler_result() {
  }

  virtual ~dialog_service_register_handler_result() throw();
  rpc_management_exception ex;

  _dialog_service_register_handler_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_register_handler_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_register_handler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_register_handler_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_register_handler_presult__isset {
  _dialog_service_register_handler_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_register_handler_presult__isset;

class dialog_service_register_handler_presult {
 public:


  virtual ~dialog_service_register_handler_presult() throw();
  rpc_management_exception ex;

  _dialog_service_register_handler_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class dialog_service_deregister_handler_args {
 public:

  dialog_service_deregister_handler_args(const dialog_service_deregister_handler_args&);
  dialog_service_deregister_handler_args(dialog_service_deregister_handler_args&&);
  dialog_service_deregister_handler_args& operator=(const dialog_service_deregister_handler_args&);
  dialog_service_deregister_handler_args& operator=(dialog_service_deregister_handler_args&&);
  dialog_service_deregister_handler_args() {
  }

  virtual ~dialog_service_deregister_handler_args() throw();

  bool operator == (const dialog_service_deregister_handler_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dialog_service_deregister_handler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_deregister_handler_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_deregister_handler_pargs {
 public:


  virtual ~dialog_service_deregister_handler_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_deregister_handler_result__isset {
  _dialog_service_deregister_handler_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_deregister_handler_result__isset;

class dialog_service_deregister_handler_result {
 public:

  dialog_service_deregister_handler_result(const dialog_service_deregister_handler_result&);
  dialog_service_deregister_handler_result(dialog_service_deregister_handler_result&&);
  dialog_service_deregister_handler_result& operator=(const dialog_service_deregister_handler_result&);
  dialog_service_deregister_handler_result& operator=(dialog_service_deregister_handler_result&&);
  dialog_service_deregister_handler_result() {
  }

  virtual ~dialog_service_deregister_handler_result() throw();
  rpc_management_exception ex;

  _dialog_service_deregister_handler_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_deregister_handler_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_deregister_handler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_deregister_handler_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_deregister_handler_presult__isset {
  _dialog_service_deregister_handler_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_deregister_handler_presult__isset;

class dialog_service_deregister_handler_presult {
 public:


  virtual ~dialog_service_deregister_handler_presult() throw();
  rpc_management_exception ex;

  _dialog_service_deregister_handler_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_create_table_args__isset {
  _dialog_service_create_table_args__isset() : table_name(false), schema(false), mode(false) {}
  bool table_name :1;
  bool schema :1;
  bool mode :1;
} _dialog_service_create_table_args__isset;

class dialog_service_create_table_args {
 public:

  dialog_service_create_table_args(const dialog_service_create_table_args&);
  dialog_service_create_table_args(dialog_service_create_table_args&&);
  dialog_service_create_table_args& operator=(const dialog_service_create_table_args&);
  dialog_service_create_table_args& operator=(dialog_service_create_table_args&&);
  dialog_service_create_table_args() : table_name(), mode((rpc_storage_mode)0) {
  }

  virtual ~dialog_service_create_table_args() throw();
  std::string table_name;
  rpc_schema schema;
  rpc_storage_mode mode;

  _dialog_service_create_table_args__isset __isset;

  void __set_table_name(const std::string& val);

  void __set_schema(const rpc_schema& val);

  void __set_mode(const rpc_storage_mode val);

  bool operator == (const dialog_service_create_table_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(schema == rhs.schema))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const dialog_service_create_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_create_table_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_create_table_pargs {
 public:


  virtual ~dialog_service_create_table_pargs() throw();
  const std::string* table_name;
  const rpc_schema* schema;
  const rpc_storage_mode* mode;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_create_table_result__isset {
  _dialog_service_create_table_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_create_table_result__isset;

class dialog_service_create_table_result {
 public:

  dialog_service_create_table_result(const dialog_service_create_table_result&);
  dialog_service_create_table_result(dialog_service_create_table_result&&);
  dialog_service_create_table_result& operator=(const dialog_service_create_table_result&);
  dialog_service_create_table_result& operator=(dialog_service_create_table_result&&);
  dialog_service_create_table_result() {
  }

  virtual ~dialog_service_create_table_result() throw();
  rpc_management_exception ex;

  _dialog_service_create_table_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_create_table_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_create_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_create_table_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_create_table_presult__isset {
  _dialog_service_create_table_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_create_table_presult__isset;

class dialog_service_create_table_presult {
 public:


  virtual ~dialog_service_create_table_presult() throw();
  rpc_management_exception ex;

  _dialog_service_create_table_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_set_current_table_args__isset {
  _dialog_service_set_current_table_args__isset() : table_name(false) {}
  bool table_name :1;
} _dialog_service_set_current_table_args__isset;

class dialog_service_set_current_table_args {
 public:

  dialog_service_set_current_table_args(const dialog_service_set_current_table_args&);
  dialog_service_set_current_table_args(dialog_service_set_current_table_args&&);
  dialog_service_set_current_table_args& operator=(const dialog_service_set_current_table_args&);
  dialog_service_set_current_table_args& operator=(dialog_service_set_current_table_args&&);
  dialog_service_set_current_table_args() : table_name() {
  }

  virtual ~dialog_service_set_current_table_args() throw();
  std::string table_name;

  _dialog_service_set_current_table_args__isset __isset;

  void __set_table_name(const std::string& val);

  bool operator == (const dialog_service_set_current_table_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const dialog_service_set_current_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_set_current_table_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_set_current_table_pargs {
 public:


  virtual ~dialog_service_set_current_table_pargs() throw();
  const std::string* table_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_set_current_table_result__isset {
  _dialog_service_set_current_table_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_set_current_table_result__isset;

class dialog_service_set_current_table_result {
 public:

  dialog_service_set_current_table_result(const dialog_service_set_current_table_result&);
  dialog_service_set_current_table_result(dialog_service_set_current_table_result&&);
  dialog_service_set_current_table_result& operator=(const dialog_service_set_current_table_result&);
  dialog_service_set_current_table_result& operator=(dialog_service_set_current_table_result&&);
  dialog_service_set_current_table_result() {
  }

  virtual ~dialog_service_set_current_table_result() throw();
  rpc_schema success;
  rpc_management_exception ex;

  _dialog_service_set_current_table_result__isset __isset;

  void __set_success(const rpc_schema& val);

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_set_current_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_set_current_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_set_current_table_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_set_current_table_presult__isset {
  _dialog_service_set_current_table_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_set_current_table_presult__isset;

class dialog_service_set_current_table_presult {
 public:


  virtual ~dialog_service_set_current_table_presult() throw();
  rpc_schema* success;
  rpc_management_exception ex;

  _dialog_service_set_current_table_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_add_index_args__isset {
  _dialog_service_add_index_args__isset() : field_name(false), bucket_size(false) {}
  bool field_name :1;
  bool bucket_size :1;
} _dialog_service_add_index_args__isset;

class dialog_service_add_index_args {
 public:

  dialog_service_add_index_args(const dialog_service_add_index_args&);
  dialog_service_add_index_args(dialog_service_add_index_args&&);
  dialog_service_add_index_args& operator=(const dialog_service_add_index_args&);
  dialog_service_add_index_args& operator=(dialog_service_add_index_args&&);
  dialog_service_add_index_args() : field_name(), bucket_size(0) {
  }

  virtual ~dialog_service_add_index_args() throw();
  std::string field_name;
  double bucket_size;

  _dialog_service_add_index_args__isset __isset;

  void __set_field_name(const std::string& val);

  void __set_bucket_size(const double val);

  bool operator == (const dialog_service_add_index_args & rhs) const
  {
    if (!(field_name == rhs.field_name))
      return false;
    if (!(bucket_size == rhs.bucket_size))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_index_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_add_index_pargs {
 public:


  virtual ~dialog_service_add_index_pargs() throw();
  const std::string* field_name;
  const double* bucket_size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_index_result__isset {
  _dialog_service_add_index_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_index_result__isset;

class dialog_service_add_index_result {
 public:

  dialog_service_add_index_result(const dialog_service_add_index_result&);
  dialog_service_add_index_result(dialog_service_add_index_result&&);
  dialog_service_add_index_result& operator=(const dialog_service_add_index_result&);
  dialog_service_add_index_result& operator=(dialog_service_add_index_result&&);
  dialog_service_add_index_result() {
  }

  virtual ~dialog_service_add_index_result() throw();
  rpc_management_exception ex;

  _dialog_service_add_index_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_add_index_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_index_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_index_presult__isset {
  _dialog_service_add_index_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_index_presult__isset;

class dialog_service_add_index_presult {
 public:


  virtual ~dialog_service_add_index_presult() throw();
  rpc_management_exception ex;

  _dialog_service_add_index_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_remove_index_args__isset {
  _dialog_service_remove_index_args__isset() : field_name(false) {}
  bool field_name :1;
} _dialog_service_remove_index_args__isset;

class dialog_service_remove_index_args {
 public:

  dialog_service_remove_index_args(const dialog_service_remove_index_args&);
  dialog_service_remove_index_args(dialog_service_remove_index_args&&);
  dialog_service_remove_index_args& operator=(const dialog_service_remove_index_args&);
  dialog_service_remove_index_args& operator=(dialog_service_remove_index_args&&);
  dialog_service_remove_index_args() : field_name() {
  }

  virtual ~dialog_service_remove_index_args() throw();
  std::string field_name;

  _dialog_service_remove_index_args__isset __isset;

  void __set_field_name(const std::string& val);

  bool operator == (const dialog_service_remove_index_args & rhs) const
  {
    if (!(field_name == rhs.field_name))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_index_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_remove_index_pargs {
 public:


  virtual ~dialog_service_remove_index_pargs() throw();
  const std::string* field_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_index_result__isset {
  _dialog_service_remove_index_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_index_result__isset;

class dialog_service_remove_index_result {
 public:

  dialog_service_remove_index_result(const dialog_service_remove_index_result&);
  dialog_service_remove_index_result(dialog_service_remove_index_result&&);
  dialog_service_remove_index_result& operator=(const dialog_service_remove_index_result&);
  dialog_service_remove_index_result& operator=(dialog_service_remove_index_result&&);
  dialog_service_remove_index_result() {
  }

  virtual ~dialog_service_remove_index_result() throw();
  rpc_management_exception ex;

  _dialog_service_remove_index_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_remove_index_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_index_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_index_presult__isset {
  _dialog_service_remove_index_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_index_presult__isset;

class dialog_service_remove_index_presult {
 public:


  virtual ~dialog_service_remove_index_presult() throw();
  rpc_management_exception ex;

  _dialog_service_remove_index_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_add_filter_args__isset {
  _dialog_service_add_filter_args__isset() : filter_name(false), filter_expr(false) {}
  bool filter_name :1;
  bool filter_expr :1;
} _dialog_service_add_filter_args__isset;

class dialog_service_add_filter_args {
 public:

  dialog_service_add_filter_args(const dialog_service_add_filter_args&);
  dialog_service_add_filter_args(dialog_service_add_filter_args&&);
  dialog_service_add_filter_args& operator=(const dialog_service_add_filter_args&);
  dialog_service_add_filter_args& operator=(dialog_service_add_filter_args&&);
  dialog_service_add_filter_args() : filter_name(), filter_expr() {
  }

  virtual ~dialog_service_add_filter_args() throw();
  std::string filter_name;
  std::string filter_expr;

  _dialog_service_add_filter_args__isset __isset;

  void __set_filter_name(const std::string& val);

  void __set_filter_expr(const std::string& val);

  bool operator == (const dialog_service_add_filter_args & rhs) const
  {
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_add_filter_pargs {
 public:


  virtual ~dialog_service_add_filter_pargs() throw();
  const std::string* filter_name;
  const std::string* filter_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_filter_result__isset {
  _dialog_service_add_filter_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_filter_result__isset;

class dialog_service_add_filter_result {
 public:

  dialog_service_add_filter_result(const dialog_service_add_filter_result&);
  dialog_service_add_filter_result(dialog_service_add_filter_result&&);
  dialog_service_add_filter_result& operator=(const dialog_service_add_filter_result&);
  dialog_service_add_filter_result& operator=(dialog_service_add_filter_result&&);
  dialog_service_add_filter_result() {
  }

  virtual ~dialog_service_add_filter_result() throw();
  rpc_management_exception ex;

  _dialog_service_add_filter_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_add_filter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_filter_presult__isset {
  _dialog_service_add_filter_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_filter_presult__isset;

class dialog_service_add_filter_presult {
 public:


  virtual ~dialog_service_add_filter_presult() throw();
  rpc_management_exception ex;

  _dialog_service_add_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_remove_filter_args__isset {
  _dialog_service_remove_filter_args__isset() : filter_name(false) {}
  bool filter_name :1;
} _dialog_service_remove_filter_args__isset;

class dialog_service_remove_filter_args {
 public:

  dialog_service_remove_filter_args(const dialog_service_remove_filter_args&);
  dialog_service_remove_filter_args(dialog_service_remove_filter_args&&);
  dialog_service_remove_filter_args& operator=(const dialog_service_remove_filter_args&);
  dialog_service_remove_filter_args& operator=(dialog_service_remove_filter_args&&);
  dialog_service_remove_filter_args() : filter_name() {
  }

  virtual ~dialog_service_remove_filter_args() throw();
  std::string filter_name;

  _dialog_service_remove_filter_args__isset __isset;

  void __set_filter_name(const std::string& val);

  bool operator == (const dialog_service_remove_filter_args & rhs) const
  {
    if (!(filter_name == rhs.filter_name))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_remove_filter_pargs {
 public:


  virtual ~dialog_service_remove_filter_pargs() throw();
  const std::string* filter_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_filter_result__isset {
  _dialog_service_remove_filter_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_filter_result__isset;

class dialog_service_remove_filter_result {
 public:

  dialog_service_remove_filter_result(const dialog_service_remove_filter_result&);
  dialog_service_remove_filter_result(dialog_service_remove_filter_result&&);
  dialog_service_remove_filter_result& operator=(const dialog_service_remove_filter_result&);
  dialog_service_remove_filter_result& operator=(dialog_service_remove_filter_result&&);
  dialog_service_remove_filter_result() {
  }

  virtual ~dialog_service_remove_filter_result() throw();
  rpc_management_exception ex;

  _dialog_service_remove_filter_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_remove_filter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_filter_presult__isset {
  _dialog_service_remove_filter_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_filter_presult__isset;

class dialog_service_remove_filter_presult {
 public:


  virtual ~dialog_service_remove_filter_presult() throw();
  rpc_management_exception ex;

  _dialog_service_remove_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_add_trigger_args__isset {
  _dialog_service_add_trigger_args__isset() : trigger_name(false), filter_name(false), trigger_expr(false) {}
  bool trigger_name :1;
  bool filter_name :1;
  bool trigger_expr :1;
} _dialog_service_add_trigger_args__isset;

class dialog_service_add_trigger_args {
 public:

  dialog_service_add_trigger_args(const dialog_service_add_trigger_args&);
  dialog_service_add_trigger_args(dialog_service_add_trigger_args&&);
  dialog_service_add_trigger_args& operator=(const dialog_service_add_trigger_args&);
  dialog_service_add_trigger_args& operator=(dialog_service_add_trigger_args&&);
  dialog_service_add_trigger_args() : trigger_name(), filter_name(), trigger_expr() {
  }

  virtual ~dialog_service_add_trigger_args() throw();
  std::string trigger_name;
  std::string filter_name;
  std::string trigger_expr;

  _dialog_service_add_trigger_args__isset __isset;

  void __set_trigger_name(const std::string& val);

  void __set_filter_name(const std::string& val);

  void __set_trigger_expr(const std::string& val);

  bool operator == (const dialog_service_add_trigger_args & rhs) const
  {
    if (!(trigger_name == rhs.trigger_name))
      return false;
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(trigger_expr == rhs.trigger_expr))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_trigger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_trigger_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_add_trigger_pargs {
 public:


  virtual ~dialog_service_add_trigger_pargs() throw();
  const std::string* trigger_name;
  const std::string* filter_name;
  const std::string* trigger_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_trigger_result__isset {
  _dialog_service_add_trigger_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_trigger_result__isset;

class dialog_service_add_trigger_result {
 public:

  dialog_service_add_trigger_result(const dialog_service_add_trigger_result&);
  dialog_service_add_trigger_result(dialog_service_add_trigger_result&&);
  dialog_service_add_trigger_result& operator=(const dialog_service_add_trigger_result&);
  dialog_service_add_trigger_result& operator=(dialog_service_add_trigger_result&&);
  dialog_service_add_trigger_result() {
  }

  virtual ~dialog_service_add_trigger_result() throw();
  rpc_management_exception ex;

  _dialog_service_add_trigger_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_add_trigger_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_add_trigger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_add_trigger_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_add_trigger_presult__isset {
  _dialog_service_add_trigger_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_add_trigger_presult__isset;

class dialog_service_add_trigger_presult {
 public:


  virtual ~dialog_service_add_trigger_presult() throw();
  rpc_management_exception ex;

  _dialog_service_add_trigger_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_remove_trigger_args__isset {
  _dialog_service_remove_trigger_args__isset() : trigger_name(false) {}
  bool trigger_name :1;
} _dialog_service_remove_trigger_args__isset;

class dialog_service_remove_trigger_args {
 public:

  dialog_service_remove_trigger_args(const dialog_service_remove_trigger_args&);
  dialog_service_remove_trigger_args(dialog_service_remove_trigger_args&&);
  dialog_service_remove_trigger_args& operator=(const dialog_service_remove_trigger_args&);
  dialog_service_remove_trigger_args& operator=(dialog_service_remove_trigger_args&&);
  dialog_service_remove_trigger_args() : trigger_name() {
  }

  virtual ~dialog_service_remove_trigger_args() throw();
  std::string trigger_name;

  _dialog_service_remove_trigger_args__isset __isset;

  void __set_trigger_name(const std::string& val);

  bool operator == (const dialog_service_remove_trigger_args & rhs) const
  {
    if (!(trigger_name == rhs.trigger_name))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_trigger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_trigger_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_remove_trigger_pargs {
 public:


  virtual ~dialog_service_remove_trigger_pargs() throw();
  const std::string* trigger_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_trigger_result__isset {
  _dialog_service_remove_trigger_result__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_trigger_result__isset;

class dialog_service_remove_trigger_result {
 public:

  dialog_service_remove_trigger_result(const dialog_service_remove_trigger_result&);
  dialog_service_remove_trigger_result(dialog_service_remove_trigger_result&&);
  dialog_service_remove_trigger_result& operator=(const dialog_service_remove_trigger_result&);
  dialog_service_remove_trigger_result& operator=(dialog_service_remove_trigger_result&&);
  dialog_service_remove_trigger_result() {
  }

  virtual ~dialog_service_remove_trigger_result() throw();
  rpc_management_exception ex;

  _dialog_service_remove_trigger_result__isset __isset;

  void __set_ex(const rpc_management_exception& val);

  bool operator == (const dialog_service_remove_trigger_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_remove_trigger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_remove_trigger_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_remove_trigger_presult__isset {
  _dialog_service_remove_trigger_presult__isset() : ex(false) {}
  bool ex :1;
} _dialog_service_remove_trigger_presult__isset;

class dialog_service_remove_trigger_presult {
 public:


  virtual ~dialog_service_remove_trigger_presult() throw();
  rpc_management_exception ex;

  _dialog_service_remove_trigger_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_append_args__isset {
  _dialog_service_append_args__isset() : data(false) {}
  bool data :1;
} _dialog_service_append_args__isset;

class dialog_service_append_args {
 public:

  dialog_service_append_args(const dialog_service_append_args&);
  dialog_service_append_args(dialog_service_append_args&&);
  dialog_service_append_args& operator=(const dialog_service_append_args&);
  dialog_service_append_args& operator=(dialog_service_append_args&&);
  dialog_service_append_args() : data() {
  }

  virtual ~dialog_service_append_args() throw();
  std::string data;

  _dialog_service_append_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const dialog_service_append_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_append_pargs {
 public:


  virtual ~dialog_service_append_pargs() throw();
  const std::string* data;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_append_result__isset {
  _dialog_service_append_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_result__isset;

class dialog_service_append_result {
 public:

  dialog_service_append_result(const dialog_service_append_result&);
  dialog_service_append_result(dialog_service_append_result&&);
  dialog_service_append_result& operator=(const dialog_service_append_result&);
  dialog_service_append_result& operator=(dialog_service_append_result&&);
  dialog_service_append_result() : success(0) {
  }

  virtual ~dialog_service_append_result() throw();
  int64_t success;

  _dialog_service_append_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const dialog_service_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_append_presult__isset {
  _dialog_service_append_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_presult__isset;

class dialog_service_append_presult {
 public:


  virtual ~dialog_service_append_presult() throw();
  int64_t* success;

  _dialog_service_append_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_append_batch_args__isset {
  _dialog_service_append_batch_args__isset() : batch(false) {}
  bool batch :1;
} _dialog_service_append_batch_args__isset;

class dialog_service_append_batch_args {
 public:

  dialog_service_append_batch_args(const dialog_service_append_batch_args&);
  dialog_service_append_batch_args(dialog_service_append_batch_args&&);
  dialog_service_append_batch_args& operator=(const dialog_service_append_batch_args&);
  dialog_service_append_batch_args& operator=(dialog_service_append_batch_args&&);
  dialog_service_append_batch_args() {
  }

  virtual ~dialog_service_append_batch_args() throw();
  rpc_record_batch batch;

  _dialog_service_append_batch_args__isset __isset;

  void __set_batch(const rpc_record_batch& val);

  bool operator == (const dialog_service_append_batch_args & rhs) const
  {
    if (!(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_batch_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_append_batch_pargs {
 public:


  virtual ~dialog_service_append_batch_pargs() throw();
  const rpc_record_batch* batch;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_append_batch_result__isset {
  _dialog_service_append_batch_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_batch_result__isset;

class dialog_service_append_batch_result {
 public:

  dialog_service_append_batch_result(const dialog_service_append_batch_result&);
  dialog_service_append_batch_result(dialog_service_append_batch_result&&);
  dialog_service_append_batch_result& operator=(const dialog_service_append_batch_result&);
  dialog_service_append_batch_result& operator=(dialog_service_append_batch_result&&);
  dialog_service_append_batch_result() : success(0) {
  }

  virtual ~dialog_service_append_batch_result() throw();
  int64_t success;

  _dialog_service_append_batch_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const dialog_service_append_batch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_append_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_append_batch_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_append_batch_presult__isset {
  _dialog_service_append_batch_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_append_batch_presult__isset;

class dialog_service_append_batch_presult {
 public:


  virtual ~dialog_service_append_batch_presult() throw();
  int64_t* success;

  _dialog_service_append_batch_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_read_args__isset {
  _dialog_service_read_args__isset() : offset(false), nrecords(false) {}
  bool offset :1;
  bool nrecords :1;
} _dialog_service_read_args__isset;

class dialog_service_read_args {
 public:

  dialog_service_read_args(const dialog_service_read_args&);
  dialog_service_read_args(dialog_service_read_args&&);
  dialog_service_read_args& operator=(const dialog_service_read_args&);
  dialog_service_read_args& operator=(dialog_service_read_args&&);
  dialog_service_read_args() : offset(0), nrecords(0) {
  }

  virtual ~dialog_service_read_args() throw();
  int64_t offset;
  int64_t nrecords;

  _dialog_service_read_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_nrecords(const int64_t val);

  bool operator == (const dialog_service_read_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(nrecords == rhs.nrecords))
      return false;
    return true;
  }
  bool operator != (const dialog_service_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_read_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_read_pargs {
 public:


  virtual ~dialog_service_read_pargs() throw();
  const int64_t* offset;
  const int64_t* nrecords;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_read_result__isset {
  _dialog_service_read_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_read_result__isset;

class dialog_service_read_result {
 public:

  dialog_service_read_result(const dialog_service_read_result&);
  dialog_service_read_result(dialog_service_read_result&&);
  dialog_service_read_result& operator=(const dialog_service_read_result&);
  dialog_service_read_result& operator=(dialog_service_read_result&&);
  dialog_service_read_result() : success() {
  }

  virtual ~dialog_service_read_result() throw();
  std::string success;

  _dialog_service_read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const dialog_service_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_read_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_read_presult__isset {
  _dialog_service_read_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_read_presult__isset;

class dialog_service_read_presult {
 public:


  virtual ~dialog_service_read_presult() throw();
  std::string* success;

  _dialog_service_read_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_adhoc_filter_args__isset {
  _dialog_service_adhoc_filter_args__isset() : filter_expr(false) {}
  bool filter_expr :1;
} _dialog_service_adhoc_filter_args__isset;

class dialog_service_adhoc_filter_args {
 public:

  dialog_service_adhoc_filter_args(const dialog_service_adhoc_filter_args&);
  dialog_service_adhoc_filter_args(dialog_service_adhoc_filter_args&&);
  dialog_service_adhoc_filter_args& operator=(const dialog_service_adhoc_filter_args&);
  dialog_service_adhoc_filter_args& operator=(dialog_service_adhoc_filter_args&&);
  dialog_service_adhoc_filter_args() : filter_expr() {
  }

  virtual ~dialog_service_adhoc_filter_args() throw();
  std::string filter_expr;

  _dialog_service_adhoc_filter_args__isset __isset;

  void __set_filter_expr(const std::string& val);

  bool operator == (const dialog_service_adhoc_filter_args & rhs) const
  {
    if (!(filter_expr == rhs.filter_expr))
      return false;
    return true;
  }
  bool operator != (const dialog_service_adhoc_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_adhoc_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_adhoc_filter_pargs {
 public:


  virtual ~dialog_service_adhoc_filter_pargs() throw();
  const std::string* filter_expr;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_adhoc_filter_result__isset {
  _dialog_service_adhoc_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_adhoc_filter_result__isset;

class dialog_service_adhoc_filter_result {
 public:

  dialog_service_adhoc_filter_result(const dialog_service_adhoc_filter_result&);
  dialog_service_adhoc_filter_result(dialog_service_adhoc_filter_result&&);
  dialog_service_adhoc_filter_result& operator=(const dialog_service_adhoc_filter_result&);
  dialog_service_adhoc_filter_result& operator=(dialog_service_adhoc_filter_result&&);
  dialog_service_adhoc_filter_result() {
  }

  virtual ~dialog_service_adhoc_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _dialog_service_adhoc_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const dialog_service_adhoc_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_adhoc_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_adhoc_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_adhoc_filter_presult__isset {
  _dialog_service_adhoc_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_adhoc_filter_presult__isset;

class dialog_service_adhoc_filter_presult {
 public:


  virtual ~dialog_service_adhoc_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _dialog_service_adhoc_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_predef_filter_args__isset {
  _dialog_service_predef_filter_args__isset() : filter_name(false), begin_ms(false), end_ms(false) {}
  bool filter_name :1;
  bool begin_ms :1;
  bool end_ms :1;
} _dialog_service_predef_filter_args__isset;

class dialog_service_predef_filter_args {
 public:

  dialog_service_predef_filter_args(const dialog_service_predef_filter_args&);
  dialog_service_predef_filter_args(dialog_service_predef_filter_args&&);
  dialog_service_predef_filter_args& operator=(const dialog_service_predef_filter_args&);
  dialog_service_predef_filter_args& operator=(dialog_service_predef_filter_args&&);
  dialog_service_predef_filter_args() : filter_name(), begin_ms(0), end_ms(0) {
  }

  virtual ~dialog_service_predef_filter_args() throw();
  std::string filter_name;
  int64_t begin_ms;
  int64_t end_ms;

  _dialog_service_predef_filter_args__isset __isset;

  void __set_filter_name(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const dialog_service_predef_filter_args & rhs) const
  {
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const dialog_service_predef_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_predef_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_predef_filter_pargs {
 public:


  virtual ~dialog_service_predef_filter_pargs() throw();
  const std::string* filter_name;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_predef_filter_result__isset {
  _dialog_service_predef_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_predef_filter_result__isset;

class dialog_service_predef_filter_result {
 public:

  dialog_service_predef_filter_result(const dialog_service_predef_filter_result&);
  dialog_service_predef_filter_result(dialog_service_predef_filter_result&&);
  dialog_service_predef_filter_result& operator=(const dialog_service_predef_filter_result&);
  dialog_service_predef_filter_result& operator=(dialog_service_predef_filter_result&&);
  dialog_service_predef_filter_result() {
  }

  virtual ~dialog_service_predef_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _dialog_service_predef_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const dialog_service_predef_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_predef_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_predef_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_predef_filter_presult__isset {
  _dialog_service_predef_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_predef_filter_presult__isset;

class dialog_service_predef_filter_presult {
 public:


  virtual ~dialog_service_predef_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _dialog_service_predef_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_combined_filter_args__isset {
  _dialog_service_combined_filter_args__isset() : filter_name(false), filter_expr(false), begin_ms(false), end_ms(false) {}
  bool filter_name :1;
  bool filter_expr :1;
  bool begin_ms :1;
  bool end_ms :1;
} _dialog_service_combined_filter_args__isset;

class dialog_service_combined_filter_args {
 public:

  dialog_service_combined_filter_args(const dialog_service_combined_filter_args&);
  dialog_service_combined_filter_args(dialog_service_combined_filter_args&&);
  dialog_service_combined_filter_args& operator=(const dialog_service_combined_filter_args&);
  dialog_service_combined_filter_args& operator=(dialog_service_combined_filter_args&&);
  dialog_service_combined_filter_args() : filter_name(), filter_expr(), begin_ms(0), end_ms(0) {
  }

  virtual ~dialog_service_combined_filter_args() throw();
  std::string filter_name;
  std::string filter_expr;
  int64_t begin_ms;
  int64_t end_ms;

  _dialog_service_combined_filter_args__isset __isset;

  void __set_filter_name(const std::string& val);

  void __set_filter_expr(const std::string& val);

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const dialog_service_combined_filter_args & rhs) const
  {
    if (!(filter_name == rhs.filter_name))
      return false;
    if (!(filter_expr == rhs.filter_expr))
      return false;
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const dialog_service_combined_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_combined_filter_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_combined_filter_pargs {
 public:


  virtual ~dialog_service_combined_filter_pargs() throw();
  const std::string* filter_name;
  const std::string* filter_expr;
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_combined_filter_result__isset {
  _dialog_service_combined_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_combined_filter_result__isset;

class dialog_service_combined_filter_result {
 public:

  dialog_service_combined_filter_result(const dialog_service_combined_filter_result&);
  dialog_service_combined_filter_result(dialog_service_combined_filter_result&&);
  dialog_service_combined_filter_result& operator=(const dialog_service_combined_filter_result&);
  dialog_service_combined_filter_result& operator=(dialog_service_combined_filter_result&&);
  dialog_service_combined_filter_result() {
  }

  virtual ~dialog_service_combined_filter_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _dialog_service_combined_filter_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const dialog_service_combined_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_combined_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_combined_filter_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_combined_filter_presult__isset {
  _dialog_service_combined_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_combined_filter_presult__isset;

class dialog_service_combined_filter_presult {
 public:


  virtual ~dialog_service_combined_filter_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _dialog_service_combined_filter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_alerts_by_time_args__isset {
  _dialog_service_alerts_by_time_args__isset() : begin_ms(false), end_ms(false) {}
  bool begin_ms :1;
  bool end_ms :1;
} _dialog_service_alerts_by_time_args__isset;

class dialog_service_alerts_by_time_args {
 public:

  dialog_service_alerts_by_time_args(const dialog_service_alerts_by_time_args&);
  dialog_service_alerts_by_time_args(dialog_service_alerts_by_time_args&&);
  dialog_service_alerts_by_time_args& operator=(const dialog_service_alerts_by_time_args&);
  dialog_service_alerts_by_time_args& operator=(dialog_service_alerts_by_time_args&&);
  dialog_service_alerts_by_time_args() : begin_ms(0), end_ms(0) {
  }

  virtual ~dialog_service_alerts_by_time_args() throw();
  int64_t begin_ms;
  int64_t end_ms;

  _dialog_service_alerts_by_time_args__isset __isset;

  void __set_begin_ms(const int64_t val);

  void __set_end_ms(const int64_t val);

  bool operator == (const dialog_service_alerts_by_time_args & rhs) const
  {
    if (!(begin_ms == rhs.begin_ms))
      return false;
    if (!(end_ms == rhs.end_ms))
      return false;
    return true;
  }
  bool operator != (const dialog_service_alerts_by_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_alerts_by_time_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_alerts_by_time_pargs {
 public:


  virtual ~dialog_service_alerts_by_time_pargs() throw();
  const int64_t* begin_ms;
  const int64_t* end_ms;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_alerts_by_time_result__isset {
  _dialog_service_alerts_by_time_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_alerts_by_time_result__isset;

class dialog_service_alerts_by_time_result {
 public:

  dialog_service_alerts_by_time_result(const dialog_service_alerts_by_time_result&);
  dialog_service_alerts_by_time_result(dialog_service_alerts_by_time_result&&);
  dialog_service_alerts_by_time_result& operator=(const dialog_service_alerts_by_time_result&);
  dialog_service_alerts_by_time_result& operator=(dialog_service_alerts_by_time_result&&);
  dialog_service_alerts_by_time_result() {
  }

  virtual ~dialog_service_alerts_by_time_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _dialog_service_alerts_by_time_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const dialog_service_alerts_by_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_alerts_by_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_alerts_by_time_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_alerts_by_time_presult__isset {
  _dialog_service_alerts_by_time_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_alerts_by_time_presult__isset;

class dialog_service_alerts_by_time_presult {
 public:


  virtual ~dialog_service_alerts_by_time_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _dialog_service_alerts_by_time_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _dialog_service_get_more_args__isset {
  _dialog_service_get_more_args__isset() : desc(false) {}
  bool desc :1;
} _dialog_service_get_more_args__isset;

class dialog_service_get_more_args {
 public:

  dialog_service_get_more_args(const dialog_service_get_more_args&);
  dialog_service_get_more_args(dialog_service_get_more_args&&);
  dialog_service_get_more_args& operator=(const dialog_service_get_more_args&);
  dialog_service_get_more_args& operator=(dialog_service_get_more_args&&);
  dialog_service_get_more_args() {
  }

  virtual ~dialog_service_get_more_args() throw();
  rpc_iterator_descriptor desc;

  _dialog_service_get_more_args__isset __isset;

  void __set_desc(const rpc_iterator_descriptor& val);

  bool operator == (const dialog_service_get_more_args & rhs) const
  {
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const dialog_service_get_more_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_get_more_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_get_more_pargs {
 public:


  virtual ~dialog_service_get_more_pargs() throw();
  const rpc_iterator_descriptor* desc;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_get_more_result__isset {
  _dialog_service_get_more_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_get_more_result__isset;

class dialog_service_get_more_result {
 public:

  dialog_service_get_more_result(const dialog_service_get_more_result&);
  dialog_service_get_more_result(dialog_service_get_more_result&&);
  dialog_service_get_more_result& operator=(const dialog_service_get_more_result&);
  dialog_service_get_more_result& operator=(dialog_service_get_more_result&&);
  dialog_service_get_more_result() {
  }

  virtual ~dialog_service_get_more_result() throw();
  rpc_iterator_handle success;
  rpc_invalid_operation ex;

  _dialog_service_get_more_result__isset __isset;

  void __set_success(const rpc_iterator_handle& val);

  void __set_ex(const rpc_invalid_operation& val);

  bool operator == (const dialog_service_get_more_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const dialog_service_get_more_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_get_more_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_get_more_presult__isset {
  _dialog_service_get_more_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _dialog_service_get_more_presult__isset;

class dialog_service_get_more_presult {
 public:


  virtual ~dialog_service_get_more_presult() throw();
  rpc_iterator_handle* success;
  rpc_invalid_operation ex;

  _dialog_service_get_more_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class dialog_service_num_records_args {
 public:

  dialog_service_num_records_args(const dialog_service_num_records_args&);
  dialog_service_num_records_args(dialog_service_num_records_args&&);
  dialog_service_num_records_args& operator=(const dialog_service_num_records_args&);
  dialog_service_num_records_args& operator=(dialog_service_num_records_args&&);
  dialog_service_num_records_args() {
  }

  virtual ~dialog_service_num_records_args() throw();

  bool operator == (const dialog_service_num_records_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dialog_service_num_records_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_num_records_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class dialog_service_num_records_pargs {
 public:


  virtual ~dialog_service_num_records_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_num_records_result__isset {
  _dialog_service_num_records_result__isset() : success(false) {}
  bool success :1;
} _dialog_service_num_records_result__isset;

class dialog_service_num_records_result {
 public:

  dialog_service_num_records_result(const dialog_service_num_records_result&);
  dialog_service_num_records_result(dialog_service_num_records_result&&);
  dialog_service_num_records_result& operator=(const dialog_service_num_records_result&);
  dialog_service_num_records_result& operator=(dialog_service_num_records_result&&);
  dialog_service_num_records_result() : success(0) {
  }

  virtual ~dialog_service_num_records_result() throw();
  int64_t success;

  _dialog_service_num_records_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const dialog_service_num_records_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dialog_service_num_records_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dialog_service_num_records_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _dialog_service_num_records_presult__isset {
  _dialog_service_num_records_presult__isset() : success(false) {}
  bool success :1;
} _dialog_service_num_records_presult__isset;

class dialog_service_num_records_presult {
 public:


  virtual ~dialog_service_num_records_presult() throw();
  int64_t* success;

  _dialog_service_num_records_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class dialog_serviceClientT : virtual public dialog_serviceIf {
 public:
  dialog_serviceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  dialog_serviceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void register_handler();
  void send_register_handler();
  void recv_register_handler();
  void deregister_handler();
  void send_deregister_handler();
  void recv_deregister_handler();
  void create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode);
  void send_create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode);
  void recv_create_table();
  void set_current_table(rpc_schema& _return, const std::string& table_name);
  void send_set_current_table(const std::string& table_name);
  void recv_set_current_table(rpc_schema& _return);
  void add_index(const std::string& field_name, const double bucket_size);
  void send_add_index(const std::string& field_name, const double bucket_size);
  void recv_add_index();
  void remove_index(const std::string& field_name);
  void send_remove_index(const std::string& field_name);
  void recv_remove_index();
  void add_filter(const std::string& filter_name, const std::string& filter_expr);
  void send_add_filter(const std::string& filter_name, const std::string& filter_expr);
  void recv_add_filter();
  void remove_filter(const std::string& filter_name);
  void send_remove_filter(const std::string& filter_name);
  void recv_remove_filter();
  void add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr);
  void send_add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr);
  void recv_add_trigger();
  void remove_trigger(const std::string& trigger_name);
  void send_remove_trigger(const std::string& trigger_name);
  void recv_remove_trigger();
  int64_t append(const std::string& data);
  void send_append(const std::string& data);
  int64_t recv_append();
  int64_t append_batch(const rpc_record_batch& batch);
  void send_append_batch(const rpc_record_batch& batch);
  int64_t recv_append_batch();
  void read(std::string& _return, const int64_t offset, const int64_t nrecords);
  void send_read(const int64_t offset, const int64_t nrecords);
  void recv_read(std::string& _return);
  void adhoc_filter(rpc_iterator_handle& _return, const std::string& filter_expr);
  void send_adhoc_filter(const std::string& filter_expr);
  void recv_adhoc_filter(rpc_iterator_handle& _return);
  void predef_filter(rpc_iterator_handle& _return, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void send_predef_filter(const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_predef_filter(rpc_iterator_handle& _return);
  void combined_filter(rpc_iterator_handle& _return, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void send_combined_filter(const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void recv_combined_filter(rpc_iterator_handle& _return);
  void alerts_by_time(rpc_iterator_handle& _return, const int64_t begin_ms, const int64_t end_ms);
  void send_alerts_by_time(const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_time(rpc_iterator_handle& _return);
  void get_more(rpc_iterator_handle& _return, const rpc_iterator_descriptor& desc);
  void send_get_more(const rpc_iterator_descriptor& desc);
  void recv_get_more(rpc_iterator_handle& _return);
  int64_t num_records();
  void send_num_records();
  int64_t recv_num_records();
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef dialog_serviceClientT< ::apache::thrift::protocol::TProtocol> dialog_serviceClient;

template <class Protocol_>
class dialog_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<dialog_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dialog_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (dialog_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_register_handler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_handler(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deregister_handler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deregister_handler(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_table(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_set_current_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_current_table(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_index(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_index(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_add_trigger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_trigger(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_trigger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_trigger(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_append_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append_batch(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_adhoc_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_adhoc_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_predef_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predef_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_combined_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_combined_filter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_alerts_by_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alerts_by_time(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_more(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_more(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_num_records(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_records(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  dialog_serviceProcessorT(boost::shared_ptr<dialog_serviceIf> iface) :
    iface_(iface) {
    processMap_["register_handler"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_register_handler,
      &dialog_serviceProcessorT::process_register_handler);
    processMap_["deregister_handler"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_deregister_handler,
      &dialog_serviceProcessorT::process_deregister_handler);
    processMap_["create_table"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_create_table,
      &dialog_serviceProcessorT::process_create_table);
    processMap_["set_current_table"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_set_current_table,
      &dialog_serviceProcessorT::process_set_current_table);
    processMap_["add_index"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_add_index,
      &dialog_serviceProcessorT::process_add_index);
    processMap_["remove_index"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_remove_index,
      &dialog_serviceProcessorT::process_remove_index);
    processMap_["add_filter"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_add_filter,
      &dialog_serviceProcessorT::process_add_filter);
    processMap_["remove_filter"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_remove_filter,
      &dialog_serviceProcessorT::process_remove_filter);
    processMap_["add_trigger"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_add_trigger,
      &dialog_serviceProcessorT::process_add_trigger);
    processMap_["remove_trigger"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_remove_trigger,
      &dialog_serviceProcessorT::process_remove_trigger);
    processMap_["append"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_append,
      &dialog_serviceProcessorT::process_append);
    processMap_["append_batch"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_append_batch,
      &dialog_serviceProcessorT::process_append_batch);
    processMap_["read"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_read,
      &dialog_serviceProcessorT::process_read);
    processMap_["adhoc_filter"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_adhoc_filter,
      &dialog_serviceProcessorT::process_adhoc_filter);
    processMap_["predef_filter"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_predef_filter,
      &dialog_serviceProcessorT::process_predef_filter);
    processMap_["combined_filter"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_combined_filter,
      &dialog_serviceProcessorT::process_combined_filter);
    processMap_["alerts_by_time"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_alerts_by_time,
      &dialog_serviceProcessorT::process_alerts_by_time);
    processMap_["get_more"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_get_more,
      &dialog_serviceProcessorT::process_get_more);
    processMap_["num_records"] = ProcessFunctions(
      &dialog_serviceProcessorT::process_num_records,
      &dialog_serviceProcessorT::process_num_records);
  }

  virtual ~dialog_serviceProcessorT() {}
};

typedef dialog_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > dialog_serviceProcessor;

template <class Protocol_>
class dialog_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  dialog_serviceProcessorFactoryT(const ::boost::shared_ptr< dialog_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< dialog_serviceIfFactory > handlerFactory_;
};

typedef dialog_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > dialog_serviceProcessorFactory;

class dialog_serviceMultiface : virtual public dialog_serviceIf {
 public:
  dialog_serviceMultiface(std::vector<boost::shared_ptr<dialog_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dialog_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<dialog_serviceIf> > ifaces_;
  dialog_serviceMultiface() {}
  void add(boost::shared_ptr<dialog_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void register_handler() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_handler();
    }
    ifaces_[i]->register_handler();
  }

  void deregister_handler() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deregister_handler();
    }
    ifaces_[i]->deregister_handler();
  }

  void create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_table(table_name, schema, mode);
    }
    ifaces_[i]->create_table(table_name, schema, mode);
  }

  void set_current_table(rpc_schema& _return, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_current_table(_return, table_name);
    }
    ifaces_[i]->set_current_table(_return, table_name);
    return;
  }

  void add_index(const std::string& field_name, const double bucket_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_index(field_name, bucket_size);
    }
    ifaces_[i]->add_index(field_name, bucket_size);
  }

  void remove_index(const std::string& field_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_index(field_name);
    }
    ifaces_[i]->remove_index(field_name);
  }

  void add_filter(const std::string& filter_name, const std::string& filter_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_filter(filter_name, filter_expr);
    }
    ifaces_[i]->add_filter(filter_name, filter_expr);
  }

  void remove_filter(const std::string& filter_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_filter(filter_name);
    }
    ifaces_[i]->remove_filter(filter_name);
  }

  void add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_trigger(trigger_name, filter_name, trigger_expr);
    }
    ifaces_[i]->add_trigger(trigger_name, filter_name, trigger_expr);
  }

  void remove_trigger(const std::string& trigger_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_trigger(trigger_name);
    }
    ifaces_[i]->remove_trigger(trigger_name);
  }

  int64_t append(const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(data);
    }
    return ifaces_[i]->append(data);
  }

  int64_t append_batch(const rpc_record_batch& batch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append_batch(batch);
    }
    return ifaces_[i]->append_batch(batch);
  }

  void read(std::string& _return, const int64_t offset, const int64_t nrecords) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, offset, nrecords);
    }
    ifaces_[i]->read(_return, offset, nrecords);
    return;
  }

  void adhoc_filter(rpc_iterator_handle& _return, const std::string& filter_expr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->adhoc_filter(_return, filter_expr);
    }
    ifaces_[i]->adhoc_filter(_return, filter_expr);
    return;
  }

  void predef_filter(rpc_iterator_handle& _return, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predef_filter(_return, filter_name, begin_ms, end_ms);
    }
    ifaces_[i]->predef_filter(_return, filter_name, begin_ms, end_ms);
    return;
  }

  void combined_filter(rpc_iterator_handle& _return, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->combined_filter(_return, filter_name, filter_expr, begin_ms, end_ms);
    }
    ifaces_[i]->combined_filter(_return, filter_name, filter_expr, begin_ms, end_ms);
    return;
  }

  void alerts_by_time(rpc_iterator_handle& _return, const int64_t begin_ms, const int64_t end_ms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alerts_by_time(_return, begin_ms, end_ms);
    }
    ifaces_[i]->alerts_by_time(_return, begin_ms, end_ms);
    return;
  }

  void get_more(rpc_iterator_handle& _return, const rpc_iterator_descriptor& desc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_more(_return, desc);
    }
    ifaces_[i]->get_more(_return, desc);
    return;
  }

  int64_t num_records() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_records();
    }
    return ifaces_[i]->num_records();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class dialog_serviceConcurrentClientT : virtual public dialog_serviceIf {
 public:
  dialog_serviceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  dialog_serviceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void register_handler();
  int32_t send_register_handler();
  void recv_register_handler(const int32_t seqid);
  void deregister_handler();
  int32_t send_deregister_handler();
  void recv_deregister_handler(const int32_t seqid);
  void create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode);
  int32_t send_create_table(const std::string& table_name, const rpc_schema& schema, const rpc_storage_mode mode);
  void recv_create_table(const int32_t seqid);
  void set_current_table(rpc_schema& _return, const std::string& table_name);
  int32_t send_set_current_table(const std::string& table_name);
  void recv_set_current_table(rpc_schema& _return, const int32_t seqid);
  void add_index(const std::string& field_name, const double bucket_size);
  int32_t send_add_index(const std::string& field_name, const double bucket_size);
  void recv_add_index(const int32_t seqid);
  void remove_index(const std::string& field_name);
  int32_t send_remove_index(const std::string& field_name);
  void recv_remove_index(const int32_t seqid);
  void add_filter(const std::string& filter_name, const std::string& filter_expr);
  int32_t send_add_filter(const std::string& filter_name, const std::string& filter_expr);
  void recv_add_filter(const int32_t seqid);
  void remove_filter(const std::string& filter_name);
  int32_t send_remove_filter(const std::string& filter_name);
  void recv_remove_filter(const int32_t seqid);
  void add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr);
  int32_t send_add_trigger(const std::string& trigger_name, const std::string& filter_name, const std::string& trigger_expr);
  void recv_add_trigger(const int32_t seqid);
  void remove_trigger(const std::string& trigger_name);
  int32_t send_remove_trigger(const std::string& trigger_name);
  void recv_remove_trigger(const int32_t seqid);
  int64_t append(const std::string& data);
  int32_t send_append(const std::string& data);
  int64_t recv_append(const int32_t seqid);
  int64_t append_batch(const rpc_record_batch& batch);
  int32_t send_append_batch(const rpc_record_batch& batch);
  int64_t recv_append_batch(const int32_t seqid);
  void read(std::string& _return, const int64_t offset, const int64_t nrecords);
  int32_t send_read(const int64_t offset, const int64_t nrecords);
  void recv_read(std::string& _return, const int32_t seqid);
  void adhoc_filter(rpc_iterator_handle& _return, const std::string& filter_expr);
  int32_t send_adhoc_filter(const std::string& filter_expr);
  void recv_adhoc_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void predef_filter(rpc_iterator_handle& _return, const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_predef_filter(const std::string& filter_name, const int64_t begin_ms, const int64_t end_ms);
  void recv_predef_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void combined_filter(rpc_iterator_handle& _return, const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_combined_filter(const std::string& filter_name, const std::string& filter_expr, const int64_t begin_ms, const int64_t end_ms);
  void recv_combined_filter(rpc_iterator_handle& _return, const int32_t seqid);
  void alerts_by_time(rpc_iterator_handle& _return, const int64_t begin_ms, const int64_t end_ms);
  int32_t send_alerts_by_time(const int64_t begin_ms, const int64_t end_ms);
  void recv_alerts_by_time(rpc_iterator_handle& _return, const int32_t seqid);
  void get_more(rpc_iterator_handle& _return, const rpc_iterator_descriptor& desc);
  int32_t send_get_more(const rpc_iterator_descriptor& desc);
  void recv_get_more(rpc_iterator_handle& _return, const int32_t seqid);
  int64_t num_records();
  int32_t send_num_records();
  int64_t recv_num_records(const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef dialog_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> dialog_serviceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#include "dialog_service.tcc"
#include "dialog_types.tcc"

#endif
