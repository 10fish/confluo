/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stream_service_H
#define stream_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "stream_service_types.h"

namespace streaming {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class stream_serviceIf {
 public:
  virtual ~stream_serviceIf() {}
  virtual void add_stream(const uuid_t uuid) = 0;
  virtual offset_t write(const uuid_t uuid, const std::string& data) = 0;
  virtual void read(std::string& _return, const uuid_t uuid, const offset_t offset, const length_t length) = 0;
};

class stream_serviceIfFactory {
 public:
  typedef stream_serviceIf Handler;

  virtual ~stream_serviceIfFactory() {}

  virtual stream_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(stream_serviceIf* /* handler */) = 0;
};

class stream_serviceIfSingletonFactory : virtual public stream_serviceIfFactory {
 public:
  stream_serviceIfSingletonFactory(const boost::shared_ptr<stream_serviceIf>& iface) : iface_(iface) {}
  virtual ~stream_serviceIfSingletonFactory() {}

  virtual stream_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(stream_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<stream_serviceIf> iface_;
};

class stream_serviceNull : virtual public stream_serviceIf {
 public:
  virtual ~stream_serviceNull() {}
  void add_stream(const uuid_t /* uuid */) {
    return;
  }
  offset_t write(const uuid_t /* uuid */, const std::string& /* data */) {
    offset_t _return = 0;
    return _return;
  }
  void read(std::string& /* _return */, const uuid_t /* uuid */, const offset_t /* offset */, const length_t /* length */) {
    return;
  }
};

typedef struct _stream_service_add_stream_args__isset {
  _stream_service_add_stream_args__isset() : uuid(false) {}
  bool uuid :1;
} _stream_service_add_stream_args__isset;

class stream_service_add_stream_args {
 public:

  stream_service_add_stream_args(const stream_service_add_stream_args&);
  stream_service_add_stream_args& operator=(const stream_service_add_stream_args&);
  stream_service_add_stream_args() : uuid(0) {
  }

  virtual ~stream_service_add_stream_args() throw();
  uuid_t uuid;

  _stream_service_add_stream_args__isset __isset;

  void __set_uuid(const uuid_t val);

  bool operator == (const stream_service_add_stream_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const stream_service_add_stream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_add_stream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stream_service_add_stream_pargs {
 public:


  virtual ~stream_service_add_stream_pargs() throw();
  const uuid_t* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stream_service_add_stream_result {
 public:

  stream_service_add_stream_result(const stream_service_add_stream_result&);
  stream_service_add_stream_result& operator=(const stream_service_add_stream_result&);
  stream_service_add_stream_result() {
  }

  virtual ~stream_service_add_stream_result() throw();

  bool operator == (const stream_service_add_stream_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const stream_service_add_stream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_add_stream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stream_service_add_stream_presult {
 public:


  virtual ~stream_service_add_stream_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stream_service_write_args__isset {
  _stream_service_write_args__isset() : uuid(false), data(false) {}
  bool uuid :1;
  bool data :1;
} _stream_service_write_args__isset;

class stream_service_write_args {
 public:

  stream_service_write_args(const stream_service_write_args&);
  stream_service_write_args& operator=(const stream_service_write_args&);
  stream_service_write_args() : uuid(0), data() {
  }

  virtual ~stream_service_write_args() throw();
  uuid_t uuid;
  std::string data;

  _stream_service_write_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_data(const std::string& val);

  bool operator == (const stream_service_write_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const stream_service_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stream_service_write_pargs {
 public:


  virtual ~stream_service_write_pargs() throw();
  const uuid_t* uuid;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stream_service_write_result__isset {
  _stream_service_write_result__isset() : success(false) {}
  bool success :1;
} _stream_service_write_result__isset;

class stream_service_write_result {
 public:

  stream_service_write_result(const stream_service_write_result&);
  stream_service_write_result& operator=(const stream_service_write_result&);
  stream_service_write_result() : success(0) {
  }

  virtual ~stream_service_write_result() throw();
  offset_t success;

  _stream_service_write_result__isset __isset;

  void __set_success(const offset_t val);

  bool operator == (const stream_service_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const stream_service_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stream_service_write_presult__isset {
  _stream_service_write_presult__isset() : success(false) {}
  bool success :1;
} _stream_service_write_presult__isset;

class stream_service_write_presult {
 public:


  virtual ~stream_service_write_presult() throw();
  offset_t* success;

  _stream_service_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stream_service_read_args__isset {
  _stream_service_read_args__isset() : uuid(false), offset(false), length(false) {}
  bool uuid :1;
  bool offset :1;
  bool length :1;
} _stream_service_read_args__isset;

class stream_service_read_args {
 public:

  stream_service_read_args(const stream_service_read_args&);
  stream_service_read_args& operator=(const stream_service_read_args&);
  stream_service_read_args() : uuid(0), offset(0), length(0) {
  }

  virtual ~stream_service_read_args() throw();
  uuid_t uuid;
  offset_t offset;
  length_t length;

  _stream_service_read_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_offset(const offset_t val);

  void __set_length(const length_t val);

  bool operator == (const stream_service_read_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const stream_service_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stream_service_read_pargs {
 public:


  virtual ~stream_service_read_pargs() throw();
  const uuid_t* uuid;
  const offset_t* offset;
  const length_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stream_service_read_result__isset {
  _stream_service_read_result__isset() : success(false) {}
  bool success :1;
} _stream_service_read_result__isset;

class stream_service_read_result {
 public:

  stream_service_read_result(const stream_service_read_result&);
  stream_service_read_result& operator=(const stream_service_read_result&);
  stream_service_read_result() : success() {
  }

  virtual ~stream_service_read_result() throw();
  std::string success;

  _stream_service_read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const stream_service_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const stream_service_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stream_service_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stream_service_read_presult__isset {
  _stream_service_read_presult__isset() : success(false) {}
  bool success :1;
} _stream_service_read_presult__isset;

class stream_service_read_presult {
 public:


  virtual ~stream_service_read_presult() throw();
  std::string* success;

  _stream_service_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class stream_serviceClient : virtual public stream_serviceIf {
 public:
  stream_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  stream_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_stream(const uuid_t uuid);
  void send_add_stream(const uuid_t uuid);
  void recv_add_stream();
  offset_t write(const uuid_t uuid, const std::string& data);
  void send_write(const uuid_t uuid, const std::string& data);
  offset_t recv_write();
  void read(std::string& _return, const uuid_t uuid, const offset_t offset, const length_t length);
  void send_read(const uuid_t uuid, const offset_t offset, const length_t length);
  void recv_read(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class stream_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<stream_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (stream_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_stream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  stream_serviceProcessor(boost::shared_ptr<stream_serviceIf> iface) :
    iface_(iface) {
    processMap_["add_stream"] = &stream_serviceProcessor::process_add_stream;
    processMap_["write"] = &stream_serviceProcessor::process_write;
    processMap_["read"] = &stream_serviceProcessor::process_read;
  }

  virtual ~stream_serviceProcessor() {}
};

class stream_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  stream_serviceProcessorFactory(const ::boost::shared_ptr< stream_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< stream_serviceIfFactory > handlerFactory_;
};

class stream_serviceMultiface : virtual public stream_serviceIf {
 public:
  stream_serviceMultiface(std::vector<boost::shared_ptr<stream_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~stream_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<stream_serviceIf> > ifaces_;
  stream_serviceMultiface() {}
  void add(boost::shared_ptr<stream_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_stream(const uuid_t uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_stream(uuid);
    }
    ifaces_[i]->add_stream(uuid);
  }

  offset_t write(const uuid_t uuid, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(uuid, data);
    }
    return ifaces_[i]->write(uuid, data);
  }

  void read(std::string& _return, const uuid_t uuid, const offset_t offset, const length_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, uuid, offset, length);
    }
    ifaces_[i]->read(_return, uuid, offset, length);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class stream_serviceConcurrentClient : virtual public stream_serviceIf {
 public:
  stream_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  stream_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_stream(const uuid_t uuid);
  int32_t send_add_stream(const uuid_t uuid);
  void recv_add_stream(const int32_t seqid);
  offset_t write(const uuid_t uuid, const std::string& data);
  int32_t send_write(const uuid_t uuid, const std::string& data);
  offset_t recv_write(const int32_t seqid);
  void read(std::string& _return, const uuid_t uuid, const offset_t offset, const length_t length);
  int32_t send_read(const uuid_t uuid, const offset_t offset, const length_t length);
  void recv_read(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
