/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef timeseries_db_service_H
#define timeseries_db_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server/timeseries_db_types.h"

namespace timeseries {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class timeseries_db_serviceIf {
 public:
  virtual ~timeseries_db_serviceIf() {}
  virtual void add_stream(const uuid_t uuid) = 0;
  virtual version_t insert_values(const uuid_t uuid, const std::string& pts) = 0;
  virtual version_t insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block) = 0;
  virtual void get_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version) = 0;
  virtual void get_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts) = 0;
  virtual void get_statistical_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version) = 0;
  virtual void get_statistical_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution) = 0;
  virtual void get_nearest_value(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version) = 0;
  virtual void get_nearest_value_latest(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts) = 0;
  virtual void compute_diff(std::string& _return, const uuid_t uuid, const version_t from_version, const version_t to_version) = 0;
  virtual int64_t num_entries(const uuid_t uuid) = 0;
};

class timeseries_db_serviceIfFactory {
 public:
  typedef timeseries_db_serviceIf Handler;

  virtual ~timeseries_db_serviceIfFactory() {}

  virtual timeseries_db_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(timeseries_db_serviceIf* /* handler */) = 0;
};

class timeseries_db_serviceIfSingletonFactory : virtual public timeseries_db_serviceIfFactory {
 public:
  timeseries_db_serviceIfSingletonFactory(const boost::shared_ptr<timeseries_db_serviceIf>& iface) : iface_(iface) {}
  virtual ~timeseries_db_serviceIfSingletonFactory() {}

  virtual timeseries_db_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(timeseries_db_serviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<timeseries_db_serviceIf> iface_;
};

class timeseries_db_serviceNull : virtual public timeseries_db_serviceIf {
 public:
  virtual ~timeseries_db_serviceNull() {}
  void add_stream(const uuid_t /* uuid */) {
    return;
  }
  version_t insert_values(const uuid_t /* uuid */, const std::string& /* pts */) {
    version_t _return = 0;
    return _return;
  }
  version_t insert_values_block(const uuid_t /* uuid */, const std::string& /* pts */, const timestamp_t /* ts_block */) {
    version_t _return = 0;
    return _return;
  }
  void get_range(std::string& /* _return */, const uuid_t /* uuid */, const timestamp_t /* start_ts */, const timestamp_t /* end_ts */, const version_t /* version */) {
    return;
  }
  void get_range_latest(std::string& /* _return */, const uuid_t /* uuid */, const timestamp_t /* start_ts */, const timestamp_t /* end_ts */) {
    return;
  }
  void get_statistical_range(std::string& /* _return */, const uuid_t /* uuid */, const timestamp_t /* start_ts */, const timestamp_t /* end_ts */, const timestamp_t /* resolution */, const version_t /* version */) {
    return;
  }
  void get_statistical_range_latest(std::string& /* _return */, const uuid_t /* uuid */, const timestamp_t /* start_ts */, const timestamp_t /* end_ts */, const timestamp_t /* resolution */) {
    return;
  }
  void get_nearest_value(std::string& /* _return */, const uuid_t /* uuid */, const bool /* direction */, const timestamp_t /* ts */, const version_t /* version */) {
    return;
  }
  void get_nearest_value_latest(std::string& /* _return */, const uuid_t /* uuid */, const bool /* direction */, const timestamp_t /* ts */) {
    return;
  }
  void compute_diff(std::string& /* _return */, const uuid_t /* uuid */, const version_t /* from_version */, const version_t /* to_version */) {
    return;
  }
  int64_t num_entries(const uuid_t /* uuid */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _timeseries_db_service_add_stream_args__isset {
  _timeseries_db_service_add_stream_args__isset() : uuid(false) {}
  bool uuid :1;
} _timeseries_db_service_add_stream_args__isset;

class timeseries_db_service_add_stream_args {
 public:

  timeseries_db_service_add_stream_args(const timeseries_db_service_add_stream_args&);
  timeseries_db_service_add_stream_args& operator=(const timeseries_db_service_add_stream_args&);
  timeseries_db_service_add_stream_args() : uuid(0) {
  }

  virtual ~timeseries_db_service_add_stream_args() throw();
  uuid_t uuid;

  _timeseries_db_service_add_stream_args__isset __isset;

  void __set_uuid(const uuid_t val);

  bool operator == (const timeseries_db_service_add_stream_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_add_stream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_add_stream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_add_stream_pargs {
 public:


  virtual ~timeseries_db_service_add_stream_pargs() throw();
  const uuid_t* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_add_stream_result {
 public:

  timeseries_db_service_add_stream_result(const timeseries_db_service_add_stream_result&);
  timeseries_db_service_add_stream_result& operator=(const timeseries_db_service_add_stream_result&);
  timeseries_db_service_add_stream_result() {
  }

  virtual ~timeseries_db_service_add_stream_result() throw();

  bool operator == (const timeseries_db_service_add_stream_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const timeseries_db_service_add_stream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_add_stream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_add_stream_presult {
 public:


  virtual ~timeseries_db_service_add_stream_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_insert_values_args__isset {
  _timeseries_db_service_insert_values_args__isset() : uuid(false), pts(false) {}
  bool uuid :1;
  bool pts :1;
} _timeseries_db_service_insert_values_args__isset;

class timeseries_db_service_insert_values_args {
 public:

  timeseries_db_service_insert_values_args(const timeseries_db_service_insert_values_args&);
  timeseries_db_service_insert_values_args& operator=(const timeseries_db_service_insert_values_args&);
  timeseries_db_service_insert_values_args() : uuid(0), pts() {
  }

  virtual ~timeseries_db_service_insert_values_args() throw();
  uuid_t uuid;
  std::string pts;

  _timeseries_db_service_insert_values_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_pts(const std::string& val);

  bool operator == (const timeseries_db_service_insert_values_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(pts == rhs.pts))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_insert_values_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_insert_values_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_insert_values_pargs {
 public:


  virtual ~timeseries_db_service_insert_values_pargs() throw();
  const uuid_t* uuid;
  const std::string* pts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_insert_values_result__isset {
  _timeseries_db_service_insert_values_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_insert_values_result__isset;

class timeseries_db_service_insert_values_result {
 public:

  timeseries_db_service_insert_values_result(const timeseries_db_service_insert_values_result&);
  timeseries_db_service_insert_values_result& operator=(const timeseries_db_service_insert_values_result&);
  timeseries_db_service_insert_values_result() : success(0) {
  }

  virtual ~timeseries_db_service_insert_values_result() throw();
  version_t success;

  _timeseries_db_service_insert_values_result__isset __isset;

  void __set_success(const version_t val);

  bool operator == (const timeseries_db_service_insert_values_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_insert_values_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_insert_values_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_insert_values_presult__isset {
  _timeseries_db_service_insert_values_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_insert_values_presult__isset;

class timeseries_db_service_insert_values_presult {
 public:


  virtual ~timeseries_db_service_insert_values_presult() throw();
  version_t* success;

  _timeseries_db_service_insert_values_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_insert_values_block_args__isset {
  _timeseries_db_service_insert_values_block_args__isset() : uuid(false), pts(false), ts_block(false) {}
  bool uuid :1;
  bool pts :1;
  bool ts_block :1;
} _timeseries_db_service_insert_values_block_args__isset;

class timeseries_db_service_insert_values_block_args {
 public:

  timeseries_db_service_insert_values_block_args(const timeseries_db_service_insert_values_block_args&);
  timeseries_db_service_insert_values_block_args& operator=(const timeseries_db_service_insert_values_block_args&);
  timeseries_db_service_insert_values_block_args() : uuid(0), pts(), ts_block(0) {
  }

  virtual ~timeseries_db_service_insert_values_block_args() throw();
  uuid_t uuid;
  std::string pts;
  timestamp_t ts_block;

  _timeseries_db_service_insert_values_block_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_pts(const std::string& val);

  void __set_ts_block(const timestamp_t val);

  bool operator == (const timeseries_db_service_insert_values_block_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(pts == rhs.pts))
      return false;
    if (!(ts_block == rhs.ts_block))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_insert_values_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_insert_values_block_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_insert_values_block_pargs {
 public:


  virtual ~timeseries_db_service_insert_values_block_pargs() throw();
  const uuid_t* uuid;
  const std::string* pts;
  const timestamp_t* ts_block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_insert_values_block_result__isset {
  _timeseries_db_service_insert_values_block_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_insert_values_block_result__isset;

class timeseries_db_service_insert_values_block_result {
 public:

  timeseries_db_service_insert_values_block_result(const timeseries_db_service_insert_values_block_result&);
  timeseries_db_service_insert_values_block_result& operator=(const timeseries_db_service_insert_values_block_result&);
  timeseries_db_service_insert_values_block_result() : success(0) {
  }

  virtual ~timeseries_db_service_insert_values_block_result() throw();
  version_t success;

  _timeseries_db_service_insert_values_block_result__isset __isset;

  void __set_success(const version_t val);

  bool operator == (const timeseries_db_service_insert_values_block_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_insert_values_block_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_insert_values_block_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_insert_values_block_presult__isset {
  _timeseries_db_service_insert_values_block_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_insert_values_block_presult__isset;

class timeseries_db_service_insert_values_block_presult {
 public:


  virtual ~timeseries_db_service_insert_values_block_presult() throw();
  version_t* success;

  _timeseries_db_service_insert_values_block_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_range_args__isset {
  _timeseries_db_service_get_range_args__isset() : uuid(false), start_ts(false), end_ts(false), version(false) {}
  bool uuid :1;
  bool start_ts :1;
  bool end_ts :1;
  bool version :1;
} _timeseries_db_service_get_range_args__isset;

class timeseries_db_service_get_range_args {
 public:

  timeseries_db_service_get_range_args(const timeseries_db_service_get_range_args&);
  timeseries_db_service_get_range_args& operator=(const timeseries_db_service_get_range_args&);
  timeseries_db_service_get_range_args() : uuid(0), start_ts(0), end_ts(0), version(0) {
  }

  virtual ~timeseries_db_service_get_range_args() throw();
  uuid_t uuid;
  timestamp_t start_ts;
  timestamp_t end_ts;
  version_t version;

  _timeseries_db_service_get_range_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_start_ts(const timestamp_t val);

  void __set_end_ts(const timestamp_t val);

  void __set_version(const version_t val);

  bool operator == (const timeseries_db_service_get_range_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(start_ts == rhs.start_ts))
      return false;
    if (!(end_ts == rhs.end_ts))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_range_pargs {
 public:


  virtual ~timeseries_db_service_get_range_pargs() throw();
  const uuid_t* uuid;
  const timestamp_t* start_ts;
  const timestamp_t* end_ts;
  const version_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_range_result__isset {
  _timeseries_db_service_get_range_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_range_result__isset;

class timeseries_db_service_get_range_result {
 public:

  timeseries_db_service_get_range_result(const timeseries_db_service_get_range_result&);
  timeseries_db_service_get_range_result& operator=(const timeseries_db_service_get_range_result&);
  timeseries_db_service_get_range_result() : success() {
  }

  virtual ~timeseries_db_service_get_range_result() throw();
  std::string success;

  _timeseries_db_service_get_range_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_range_presult__isset {
  _timeseries_db_service_get_range_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_range_presult__isset;

class timeseries_db_service_get_range_presult {
 public:


  virtual ~timeseries_db_service_get_range_presult() throw();
  std::string* success;

  _timeseries_db_service_get_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_range_latest_args__isset {
  _timeseries_db_service_get_range_latest_args__isset() : uuid(false), start_ts(false), end_ts(false) {}
  bool uuid :1;
  bool start_ts :1;
  bool end_ts :1;
} _timeseries_db_service_get_range_latest_args__isset;

class timeseries_db_service_get_range_latest_args {
 public:

  timeseries_db_service_get_range_latest_args(const timeseries_db_service_get_range_latest_args&);
  timeseries_db_service_get_range_latest_args& operator=(const timeseries_db_service_get_range_latest_args&);
  timeseries_db_service_get_range_latest_args() : uuid(0), start_ts(0), end_ts(0) {
  }

  virtual ~timeseries_db_service_get_range_latest_args() throw();
  uuid_t uuid;
  timestamp_t start_ts;
  timestamp_t end_ts;

  _timeseries_db_service_get_range_latest_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_start_ts(const timestamp_t val);

  void __set_end_ts(const timestamp_t val);

  bool operator == (const timeseries_db_service_get_range_latest_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(start_ts == rhs.start_ts))
      return false;
    if (!(end_ts == rhs.end_ts))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_range_latest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_range_latest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_range_latest_pargs {
 public:


  virtual ~timeseries_db_service_get_range_latest_pargs() throw();
  const uuid_t* uuid;
  const timestamp_t* start_ts;
  const timestamp_t* end_ts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_range_latest_result__isset {
  _timeseries_db_service_get_range_latest_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_range_latest_result__isset;

class timeseries_db_service_get_range_latest_result {
 public:

  timeseries_db_service_get_range_latest_result(const timeseries_db_service_get_range_latest_result&);
  timeseries_db_service_get_range_latest_result& operator=(const timeseries_db_service_get_range_latest_result&);
  timeseries_db_service_get_range_latest_result() : success() {
  }

  virtual ~timeseries_db_service_get_range_latest_result() throw();
  std::string success;

  _timeseries_db_service_get_range_latest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_range_latest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_range_latest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_range_latest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_range_latest_presult__isset {
  _timeseries_db_service_get_range_latest_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_range_latest_presult__isset;

class timeseries_db_service_get_range_latest_presult {
 public:


  virtual ~timeseries_db_service_get_range_latest_presult() throw();
  std::string* success;

  _timeseries_db_service_get_range_latest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_statistical_range_args__isset {
  _timeseries_db_service_get_statistical_range_args__isset() : uuid(false), start_ts(false), end_ts(false), resolution(false), version(false) {}
  bool uuid :1;
  bool start_ts :1;
  bool end_ts :1;
  bool resolution :1;
  bool version :1;
} _timeseries_db_service_get_statistical_range_args__isset;

class timeseries_db_service_get_statistical_range_args {
 public:

  timeseries_db_service_get_statistical_range_args(const timeseries_db_service_get_statistical_range_args&);
  timeseries_db_service_get_statistical_range_args& operator=(const timeseries_db_service_get_statistical_range_args&);
  timeseries_db_service_get_statistical_range_args() : uuid(0), start_ts(0), end_ts(0), resolution(0), version(0) {
  }

  virtual ~timeseries_db_service_get_statistical_range_args() throw();
  uuid_t uuid;
  timestamp_t start_ts;
  timestamp_t end_ts;
  timestamp_t resolution;
  version_t version;

  _timeseries_db_service_get_statistical_range_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_start_ts(const timestamp_t val);

  void __set_end_ts(const timestamp_t val);

  void __set_resolution(const timestamp_t val);

  void __set_version(const version_t val);

  bool operator == (const timeseries_db_service_get_statistical_range_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(start_ts == rhs.start_ts))
      return false;
    if (!(end_ts == rhs.end_ts))
      return false;
    if (!(resolution == rhs.resolution))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_statistical_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_statistical_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_statistical_range_pargs {
 public:


  virtual ~timeseries_db_service_get_statistical_range_pargs() throw();
  const uuid_t* uuid;
  const timestamp_t* start_ts;
  const timestamp_t* end_ts;
  const timestamp_t* resolution;
  const version_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_statistical_range_result__isset {
  _timeseries_db_service_get_statistical_range_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_statistical_range_result__isset;

class timeseries_db_service_get_statistical_range_result {
 public:

  timeseries_db_service_get_statistical_range_result(const timeseries_db_service_get_statistical_range_result&);
  timeseries_db_service_get_statistical_range_result& operator=(const timeseries_db_service_get_statistical_range_result&);
  timeseries_db_service_get_statistical_range_result() : success() {
  }

  virtual ~timeseries_db_service_get_statistical_range_result() throw();
  std::string success;

  _timeseries_db_service_get_statistical_range_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_statistical_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_statistical_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_statistical_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_statistical_range_presult__isset {
  _timeseries_db_service_get_statistical_range_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_statistical_range_presult__isset;

class timeseries_db_service_get_statistical_range_presult {
 public:


  virtual ~timeseries_db_service_get_statistical_range_presult() throw();
  std::string* success;

  _timeseries_db_service_get_statistical_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_statistical_range_latest_args__isset {
  _timeseries_db_service_get_statistical_range_latest_args__isset() : uuid(false), start_ts(false), end_ts(false), resolution(false) {}
  bool uuid :1;
  bool start_ts :1;
  bool end_ts :1;
  bool resolution :1;
} _timeseries_db_service_get_statistical_range_latest_args__isset;

class timeseries_db_service_get_statistical_range_latest_args {
 public:

  timeseries_db_service_get_statistical_range_latest_args(const timeseries_db_service_get_statistical_range_latest_args&);
  timeseries_db_service_get_statistical_range_latest_args& operator=(const timeseries_db_service_get_statistical_range_latest_args&);
  timeseries_db_service_get_statistical_range_latest_args() : uuid(0), start_ts(0), end_ts(0), resolution(0) {
  }

  virtual ~timeseries_db_service_get_statistical_range_latest_args() throw();
  uuid_t uuid;
  timestamp_t start_ts;
  timestamp_t end_ts;
  timestamp_t resolution;

  _timeseries_db_service_get_statistical_range_latest_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_start_ts(const timestamp_t val);

  void __set_end_ts(const timestamp_t val);

  void __set_resolution(const timestamp_t val);

  bool operator == (const timeseries_db_service_get_statistical_range_latest_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(start_ts == rhs.start_ts))
      return false;
    if (!(end_ts == rhs.end_ts))
      return false;
    if (!(resolution == rhs.resolution))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_statistical_range_latest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_statistical_range_latest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_statistical_range_latest_pargs {
 public:


  virtual ~timeseries_db_service_get_statistical_range_latest_pargs() throw();
  const uuid_t* uuid;
  const timestamp_t* start_ts;
  const timestamp_t* end_ts;
  const timestamp_t* resolution;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_statistical_range_latest_result__isset {
  _timeseries_db_service_get_statistical_range_latest_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_statistical_range_latest_result__isset;

class timeseries_db_service_get_statistical_range_latest_result {
 public:

  timeseries_db_service_get_statistical_range_latest_result(const timeseries_db_service_get_statistical_range_latest_result&);
  timeseries_db_service_get_statistical_range_latest_result& operator=(const timeseries_db_service_get_statistical_range_latest_result&);
  timeseries_db_service_get_statistical_range_latest_result() : success() {
  }

  virtual ~timeseries_db_service_get_statistical_range_latest_result() throw();
  std::string success;

  _timeseries_db_service_get_statistical_range_latest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_statistical_range_latest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_statistical_range_latest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_statistical_range_latest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_statistical_range_latest_presult__isset {
  _timeseries_db_service_get_statistical_range_latest_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_statistical_range_latest_presult__isset;

class timeseries_db_service_get_statistical_range_latest_presult {
 public:


  virtual ~timeseries_db_service_get_statistical_range_latest_presult() throw();
  std::string* success;

  _timeseries_db_service_get_statistical_range_latest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_nearest_value_args__isset {
  _timeseries_db_service_get_nearest_value_args__isset() : uuid(false), direction(false), ts(false), version(false) {}
  bool uuid :1;
  bool direction :1;
  bool ts :1;
  bool version :1;
} _timeseries_db_service_get_nearest_value_args__isset;

class timeseries_db_service_get_nearest_value_args {
 public:

  timeseries_db_service_get_nearest_value_args(const timeseries_db_service_get_nearest_value_args&);
  timeseries_db_service_get_nearest_value_args& operator=(const timeseries_db_service_get_nearest_value_args&);
  timeseries_db_service_get_nearest_value_args() : uuid(0), direction(0), ts(0), version(0) {
  }

  virtual ~timeseries_db_service_get_nearest_value_args() throw();
  uuid_t uuid;
  bool direction;
  timestamp_t ts;
  version_t version;

  _timeseries_db_service_get_nearest_value_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_direction(const bool val);

  void __set_ts(const timestamp_t val);

  void __set_version(const version_t val);

  bool operator == (const timeseries_db_service_get_nearest_value_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_nearest_value_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_nearest_value_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_nearest_value_pargs {
 public:


  virtual ~timeseries_db_service_get_nearest_value_pargs() throw();
  const uuid_t* uuid;
  const bool* direction;
  const timestamp_t* ts;
  const version_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_nearest_value_result__isset {
  _timeseries_db_service_get_nearest_value_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_nearest_value_result__isset;

class timeseries_db_service_get_nearest_value_result {
 public:

  timeseries_db_service_get_nearest_value_result(const timeseries_db_service_get_nearest_value_result&);
  timeseries_db_service_get_nearest_value_result& operator=(const timeseries_db_service_get_nearest_value_result&);
  timeseries_db_service_get_nearest_value_result() : success() {
  }

  virtual ~timeseries_db_service_get_nearest_value_result() throw();
  std::string success;

  _timeseries_db_service_get_nearest_value_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_nearest_value_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_nearest_value_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_nearest_value_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_nearest_value_presult__isset {
  _timeseries_db_service_get_nearest_value_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_nearest_value_presult__isset;

class timeseries_db_service_get_nearest_value_presult {
 public:


  virtual ~timeseries_db_service_get_nearest_value_presult() throw();
  std::string* success;

  _timeseries_db_service_get_nearest_value_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_get_nearest_value_latest_args__isset {
  _timeseries_db_service_get_nearest_value_latest_args__isset() : uuid(false), direction(false), ts(false) {}
  bool uuid :1;
  bool direction :1;
  bool ts :1;
} _timeseries_db_service_get_nearest_value_latest_args__isset;

class timeseries_db_service_get_nearest_value_latest_args {
 public:

  timeseries_db_service_get_nearest_value_latest_args(const timeseries_db_service_get_nearest_value_latest_args&);
  timeseries_db_service_get_nearest_value_latest_args& operator=(const timeseries_db_service_get_nearest_value_latest_args&);
  timeseries_db_service_get_nearest_value_latest_args() : uuid(0), direction(0), ts(0) {
  }

  virtual ~timeseries_db_service_get_nearest_value_latest_args() throw();
  uuid_t uuid;
  bool direction;
  timestamp_t ts;

  _timeseries_db_service_get_nearest_value_latest_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_direction(const bool val);

  void __set_ts(const timestamp_t val);

  bool operator == (const timeseries_db_service_get_nearest_value_latest_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(ts == rhs.ts))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_nearest_value_latest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_nearest_value_latest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_get_nearest_value_latest_pargs {
 public:


  virtual ~timeseries_db_service_get_nearest_value_latest_pargs() throw();
  const uuid_t* uuid;
  const bool* direction;
  const timestamp_t* ts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_nearest_value_latest_result__isset {
  _timeseries_db_service_get_nearest_value_latest_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_nearest_value_latest_result__isset;

class timeseries_db_service_get_nearest_value_latest_result {
 public:

  timeseries_db_service_get_nearest_value_latest_result(const timeseries_db_service_get_nearest_value_latest_result&);
  timeseries_db_service_get_nearest_value_latest_result& operator=(const timeseries_db_service_get_nearest_value_latest_result&);
  timeseries_db_service_get_nearest_value_latest_result() : success() {
  }

  virtual ~timeseries_db_service_get_nearest_value_latest_result() throw();
  std::string success;

  _timeseries_db_service_get_nearest_value_latest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_get_nearest_value_latest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_get_nearest_value_latest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_get_nearest_value_latest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_get_nearest_value_latest_presult__isset {
  _timeseries_db_service_get_nearest_value_latest_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_get_nearest_value_latest_presult__isset;

class timeseries_db_service_get_nearest_value_latest_presult {
 public:


  virtual ~timeseries_db_service_get_nearest_value_latest_presult() throw();
  std::string* success;

  _timeseries_db_service_get_nearest_value_latest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_compute_diff_args__isset {
  _timeseries_db_service_compute_diff_args__isset() : uuid(false), from_version(false), to_version(false) {}
  bool uuid :1;
  bool from_version :1;
  bool to_version :1;
} _timeseries_db_service_compute_diff_args__isset;

class timeseries_db_service_compute_diff_args {
 public:

  timeseries_db_service_compute_diff_args(const timeseries_db_service_compute_diff_args&);
  timeseries_db_service_compute_diff_args& operator=(const timeseries_db_service_compute_diff_args&);
  timeseries_db_service_compute_diff_args() : uuid(0), from_version(0), to_version(0) {
  }

  virtual ~timeseries_db_service_compute_diff_args() throw();
  uuid_t uuid;
  version_t from_version;
  version_t to_version;

  _timeseries_db_service_compute_diff_args__isset __isset;

  void __set_uuid(const uuid_t val);

  void __set_from_version(const version_t val);

  void __set_to_version(const version_t val);

  bool operator == (const timeseries_db_service_compute_diff_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    if (!(from_version == rhs.from_version))
      return false;
    if (!(to_version == rhs.to_version))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_compute_diff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_compute_diff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_compute_diff_pargs {
 public:


  virtual ~timeseries_db_service_compute_diff_pargs() throw();
  const uuid_t* uuid;
  const version_t* from_version;
  const version_t* to_version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_compute_diff_result__isset {
  _timeseries_db_service_compute_diff_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_compute_diff_result__isset;

class timeseries_db_service_compute_diff_result {
 public:

  timeseries_db_service_compute_diff_result(const timeseries_db_service_compute_diff_result&);
  timeseries_db_service_compute_diff_result& operator=(const timeseries_db_service_compute_diff_result&);
  timeseries_db_service_compute_diff_result() : success() {
  }

  virtual ~timeseries_db_service_compute_diff_result() throw();
  std::string success;

  _timeseries_db_service_compute_diff_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const timeseries_db_service_compute_diff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_compute_diff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_compute_diff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_compute_diff_presult__isset {
  _timeseries_db_service_compute_diff_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_compute_diff_presult__isset;

class timeseries_db_service_compute_diff_presult {
 public:


  virtual ~timeseries_db_service_compute_diff_presult() throw();
  std::string* success;

  _timeseries_db_service_compute_diff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _timeseries_db_service_num_entries_args__isset {
  _timeseries_db_service_num_entries_args__isset() : uuid(false) {}
  bool uuid :1;
} _timeseries_db_service_num_entries_args__isset;

class timeseries_db_service_num_entries_args {
 public:

  timeseries_db_service_num_entries_args(const timeseries_db_service_num_entries_args&);
  timeseries_db_service_num_entries_args& operator=(const timeseries_db_service_num_entries_args&);
  timeseries_db_service_num_entries_args() : uuid(0) {
  }

  virtual ~timeseries_db_service_num_entries_args() throw();
  uuid_t uuid;

  _timeseries_db_service_num_entries_args__isset __isset;

  void __set_uuid(const uuid_t val);

  bool operator == (const timeseries_db_service_num_entries_args & rhs) const
  {
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_num_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_num_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class timeseries_db_service_num_entries_pargs {
 public:


  virtual ~timeseries_db_service_num_entries_pargs() throw();
  const uuid_t* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_num_entries_result__isset {
  _timeseries_db_service_num_entries_result__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_num_entries_result__isset;

class timeseries_db_service_num_entries_result {
 public:

  timeseries_db_service_num_entries_result(const timeseries_db_service_num_entries_result&);
  timeseries_db_service_num_entries_result& operator=(const timeseries_db_service_num_entries_result&);
  timeseries_db_service_num_entries_result() : success(0) {
  }

  virtual ~timeseries_db_service_num_entries_result() throw();
  int64_t success;

  _timeseries_db_service_num_entries_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const timeseries_db_service_num_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const timeseries_db_service_num_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timeseries_db_service_num_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _timeseries_db_service_num_entries_presult__isset {
  _timeseries_db_service_num_entries_presult__isset() : success(false) {}
  bool success :1;
} _timeseries_db_service_num_entries_presult__isset;

class timeseries_db_service_num_entries_presult {
 public:


  virtual ~timeseries_db_service_num_entries_presult() throw();
  int64_t* success;

  _timeseries_db_service_num_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class timeseries_db_serviceClient : virtual public timeseries_db_serviceIf {
 public:
  timeseries_db_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  timeseries_db_serviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_stream(const uuid_t uuid);
  void send_add_stream(const uuid_t uuid);
  void recv_add_stream();
  version_t insert_values(const uuid_t uuid, const std::string& pts);
  void send_insert_values(const uuid_t uuid, const std::string& pts);
  version_t recv_insert_values();
  version_t insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block);
  void send_insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block);
  version_t recv_insert_values_block();
  void get_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version);
  void send_get_range(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version);
  void recv_get_range(std::string& _return);
  void get_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts);
  void send_get_range_latest(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts);
  void recv_get_range_latest(std::string& _return);
  void get_statistical_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version);
  void send_get_statistical_range(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version);
  void recv_get_statistical_range(std::string& _return);
  void get_statistical_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution);
  void send_get_statistical_range_latest(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution);
  void recv_get_statistical_range_latest(std::string& _return);
  void get_nearest_value(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version);
  void send_get_nearest_value(const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version);
  void recv_get_nearest_value(std::string& _return);
  void get_nearest_value_latest(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts);
  void send_get_nearest_value_latest(const uuid_t uuid, const bool direction, const timestamp_t ts);
  void recv_get_nearest_value_latest(std::string& _return);
  void compute_diff(std::string& _return, const uuid_t uuid, const version_t from_version, const version_t to_version);
  void send_compute_diff(const uuid_t uuid, const version_t from_version, const version_t to_version);
  void recv_compute_diff(std::string& _return);
  int64_t num_entries(const uuid_t uuid);
  void send_num_entries(const uuid_t uuid);
  int64_t recv_num_entries();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class timeseries_db_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<timeseries_db_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (timeseries_db_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_stream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert_values(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert_values_block(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_range_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_statistical_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_statistical_range_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nearest_value(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_nearest_value_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compute_diff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  timeseries_db_serviceProcessor(boost::shared_ptr<timeseries_db_serviceIf> iface) :
    iface_(iface) {
    processMap_["add_stream"] = &timeseries_db_serviceProcessor::process_add_stream;
    processMap_["insert_values"] = &timeseries_db_serviceProcessor::process_insert_values;
    processMap_["insert_values_block"] = &timeseries_db_serviceProcessor::process_insert_values_block;
    processMap_["get_range"] = &timeseries_db_serviceProcessor::process_get_range;
    processMap_["get_range_latest"] = &timeseries_db_serviceProcessor::process_get_range_latest;
    processMap_["get_statistical_range"] = &timeseries_db_serviceProcessor::process_get_statistical_range;
    processMap_["get_statistical_range_latest"] = &timeseries_db_serviceProcessor::process_get_statistical_range_latest;
    processMap_["get_nearest_value"] = &timeseries_db_serviceProcessor::process_get_nearest_value;
    processMap_["get_nearest_value_latest"] = &timeseries_db_serviceProcessor::process_get_nearest_value_latest;
    processMap_["compute_diff"] = &timeseries_db_serviceProcessor::process_compute_diff;
    processMap_["num_entries"] = &timeseries_db_serviceProcessor::process_num_entries;
  }

  virtual ~timeseries_db_serviceProcessor() {}
};

class timeseries_db_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  timeseries_db_serviceProcessorFactory(const ::boost::shared_ptr< timeseries_db_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< timeseries_db_serviceIfFactory > handlerFactory_;
};

class timeseries_db_serviceMultiface : virtual public timeseries_db_serviceIf {
 public:
  timeseries_db_serviceMultiface(std::vector<boost::shared_ptr<timeseries_db_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~timeseries_db_serviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<timeseries_db_serviceIf> > ifaces_;
  timeseries_db_serviceMultiface() {}
  void add(boost::shared_ptr<timeseries_db_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_stream(const uuid_t uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_stream(uuid);
    }
    ifaces_[i]->add_stream(uuid);
  }

  version_t insert_values(const uuid_t uuid, const std::string& pts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert_values(uuid, pts);
    }
    return ifaces_[i]->insert_values(uuid, pts);
  }

  version_t insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert_values_block(uuid, pts, ts_block);
    }
    return ifaces_[i]->insert_values_block(uuid, pts, ts_block);
  }

  void get_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_range(_return, uuid, start_ts, end_ts, version);
    }
    ifaces_[i]->get_range(_return, uuid, start_ts, end_ts, version);
    return;
  }

  void get_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_range_latest(_return, uuid, start_ts, end_ts);
    }
    ifaces_[i]->get_range_latest(_return, uuid, start_ts, end_ts);
    return;
  }

  void get_statistical_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_statistical_range(_return, uuid, start_ts, end_ts, resolution, version);
    }
    ifaces_[i]->get_statistical_range(_return, uuid, start_ts, end_ts, resolution, version);
    return;
  }

  void get_statistical_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_statistical_range_latest(_return, uuid, start_ts, end_ts, resolution);
    }
    ifaces_[i]->get_statistical_range_latest(_return, uuid, start_ts, end_ts, resolution);
    return;
  }

  void get_nearest_value(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nearest_value(_return, uuid, direction, ts, version);
    }
    ifaces_[i]->get_nearest_value(_return, uuid, direction, ts, version);
    return;
  }

  void get_nearest_value_latest(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_nearest_value_latest(_return, uuid, direction, ts);
    }
    ifaces_[i]->get_nearest_value_latest(_return, uuid, direction, ts);
    return;
  }

  void compute_diff(std::string& _return, const uuid_t uuid, const version_t from_version, const version_t to_version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compute_diff(_return, uuid, from_version, to_version);
    }
    ifaces_[i]->compute_diff(_return, uuid, from_version, to_version);
    return;
  }

  int64_t num_entries(const uuid_t uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_entries(uuid);
    }
    return ifaces_[i]->num_entries(uuid);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class timeseries_db_serviceConcurrentClient : virtual public timeseries_db_serviceIf {
 public:
  timeseries_db_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  timeseries_db_serviceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_stream(const uuid_t uuid);
  int32_t send_add_stream(const uuid_t uuid);
  void recv_add_stream(const int32_t seqid);
  version_t insert_values(const uuid_t uuid, const std::string& pts);
  int32_t send_insert_values(const uuid_t uuid, const std::string& pts);
  version_t recv_insert_values(const int32_t seqid);
  version_t insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block);
  int32_t send_insert_values_block(const uuid_t uuid, const std::string& pts, const timestamp_t ts_block);
  version_t recv_insert_values_block(const int32_t seqid);
  void get_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version);
  int32_t send_get_range(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const version_t version);
  void recv_get_range(std::string& _return, const int32_t seqid);
  void get_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts);
  int32_t send_get_range_latest(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts);
  void recv_get_range_latest(std::string& _return, const int32_t seqid);
  void get_statistical_range(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version);
  int32_t send_get_statistical_range(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution, const version_t version);
  void recv_get_statistical_range(std::string& _return, const int32_t seqid);
  void get_statistical_range_latest(std::string& _return, const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution);
  int32_t send_get_statistical_range_latest(const uuid_t uuid, const timestamp_t start_ts, const timestamp_t end_ts, const timestamp_t resolution);
  void recv_get_statistical_range_latest(std::string& _return, const int32_t seqid);
  void get_nearest_value(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version);
  int32_t send_get_nearest_value(const uuid_t uuid, const bool direction, const timestamp_t ts, const version_t version);
  void recv_get_nearest_value(std::string& _return, const int32_t seqid);
  void get_nearest_value_latest(std::string& _return, const uuid_t uuid, const bool direction, const timestamp_t ts);
  int32_t send_get_nearest_value_latest(const uuid_t uuid, const bool direction, const timestamp_t ts);
  void recv_get_nearest_value_latest(std::string& _return, const int32_t seqid);
  void compute_diff(std::string& _return, const uuid_t uuid, const version_t from_version, const version_t to_version);
  int32_t send_compute_diff(const uuid_t uuid, const version_t from_version, const version_t to_version);
  void recv_compute_diff(std::string& _return, const int32_t seqid);
  int64_t num_entries(const uuid_t uuid);
  int32_t send_num_entries(const uuid_t uuid);
  int64_t recv_num_entries(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
