#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from graphstore import GraphStoreService
from graphstore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 add_node(TNode n)')
    print('  TNode get_node(i64 type, i64 id)')
    print('  bool update_node(TNode n)')
    print('  bool delete_node(i64 type, i64 id)')
    print('  bool add_link(TLink a)')
    print('  bool update_link(TLink a)')
    print('  bool delete_link(i64 id1, i64 link_type, i64 id2)')
    print('  TLink get_link(i64 id1, i64 link_type, i64 id2)')
    print('   multiget_link(i64 id1, i64 link_type,  id2s)')
    print('   get_link_list(i64 id1, i64 link_type)')
    print('   get_link_list_range(i64 id1, i64 link_type, i64 min_ts, i64 max_ts, i64 off, i64 limit)')
    print('  i64 count_links(i64 id1, i64 link_type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = GraphStoreService.Client(protocol)
transport.open()

if cmd == 'add_node':
    if len(args) != 1:
        print('add_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_node(eval(args[0]),))

elif cmd == 'get_node':
    if len(args) != 2:
        print('get_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_node(eval(args[0]), eval(args[1]),))

elif cmd == 'update_node':
    if len(args) != 1:
        print('update_node requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_node(eval(args[0]),))

elif cmd == 'delete_node':
    if len(args) != 2:
        print('delete_node requires 2 args')
        sys.exit(1)
    pp.pprint(client.delete_node(eval(args[0]), eval(args[1]),))

elif cmd == 'add_link':
    if len(args) != 1:
        print('add_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.add_link(eval(args[0]),))

elif cmd == 'update_link':
    if len(args) != 1:
        print('update_link requires 1 args')
        sys.exit(1)
    pp.pprint(client.update_link(eval(args[0]),))

elif cmd == 'delete_link':
    if len(args) != 3:
        print('delete_link requires 3 args')
        sys.exit(1)
    pp.pprint(client.delete_link(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_link':
    if len(args) != 3:
        print('get_link requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_link(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'multiget_link':
    if len(args) != 3:
        print('multiget_link requires 3 args')
        sys.exit(1)
    pp.pprint(client.multiget_link(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_link_list':
    if len(args) != 2:
        print('get_link_list requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_link_list(eval(args[0]), eval(args[1]),))

elif cmd == 'get_link_list_range':
    if len(args) != 6:
        print('get_link_list_range requires 6 args')
        sys.exit(1)
    pp.pprint(client.get_link_list_range(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'count_links':
    if len(args) != 2:
        print('count_links requires 2 args')
        sys.exit(1)
    pp.pprint(client.count_links(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
