/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.graphstore;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-09")
public class TLink implements org.apache.thrift.TBase<TLink, TLink._Fields>, java.io.Serializable, Cloneable, Comparable<TLink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLink");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("id1", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("id2", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLinkTupleSchemeFactory();

  public long version; // required
  public long id1; // required
  public long link_type; // required
  public long id2; // required
  public long time; // required
  public java.lang.String data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    ID1((short)2, "id1"),
    LINK_TYPE((short)3, "link_type"),
    ID2((short)4, "id2"),
    TIME((short)5, "time"),
    DATA((short)6, "data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // ID1
          return ID1;
        case 3: // LINK_TYPE
          return LINK_TYPE;
        case 4: // ID2
          return ID2;
        case 5: // TIME
          return TIME;
        case 6: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __ID1_ISSET_ID = 1;
  private static final int __LINK_TYPE_ISSET_ID = 2;
  private static final int __ID2_ISSET_ID = 3;
  private static final int __TIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID1, new org.apache.thrift.meta_data.FieldMetaData("id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID2, new org.apache.thrift.meta_data.FieldMetaData("id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLink.class, metaDataMap);
  }

  public TLink() {
  }

  public TLink(
    long version,
    long id1,
    long link_type,
    long id2,
    long time,
    java.lang.String data)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.id1 = id1;
    setId1IsSet(true);
    this.link_type = link_type;
    setLink_typeIsSet(true);
    this.id2 = id2;
    setId2IsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLink(TLink other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.id1 = other.id1;
    this.link_type = other.link_type;
    this.id2 = other.id2;
    this.time = other.time;
    if (other.isSetData()) {
      this.data = other.data;
    }
  }

  public TLink deepCopy() {
    return new TLink(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setId1IsSet(false);
    this.id1 = 0;
    setLink_typeIsSet(false);
    this.link_type = 0;
    setId2IsSet(false);
    this.id2 = 0;
    setTimeIsSet(false);
    this.time = 0;
    this.data = null;
  }

  public long getVersion() {
    return this.version;
  }

  public TLink setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getId1() {
    return this.id1;
  }

  public TLink setId1(long id1) {
    this.id1 = id1;
    setId1IsSet(true);
    return this;
  }

  public void unsetId1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID1_ISSET_ID);
  }

  /** Returns true if field id1 is set (has been assigned a value) and false otherwise */
  public boolean isSetId1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID1_ISSET_ID);
  }

  public void setId1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID1_ISSET_ID, value);
  }

  public long getLink_type() {
    return this.link_type;
  }

  public TLink setLink_type(long link_type) {
    this.link_type = link_type;
    setLink_typeIsSet(true);
    return this;
  }

  public void unsetLink_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
  }

  /** Returns true if field link_type is set (has been assigned a value) and false otherwise */
  public boolean isSetLink_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
  }

  public void setLink_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
  }

  public long getId2() {
    return this.id2;
  }

  public TLink setId2(long id2) {
    this.id2 = id2;
    setId2IsSet(true);
    return this;
  }

  public void unsetId2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID2_ISSET_ID);
  }

  /** Returns true if field id2 is set (has been assigned a value) and false otherwise */
  public boolean isSetId2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID2_ISSET_ID);
  }

  public void setId2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID2_ISSET_ID, value);
  }

  public long getTime() {
    return this.time;
  }

  public TLink setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public java.lang.String getData() {
    return this.data;
  }

  public TLink setData(java.lang.String data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case ID1:
      if (value == null) {
        unsetId1();
      } else {
        setId1((java.lang.Long)value);
      }
      break;

    case LINK_TYPE:
      if (value == null) {
        unsetLink_type();
      } else {
        setLink_type((java.lang.Long)value);
      }
      break;

    case ID2:
      if (value == null) {
        unsetId2();
      } else {
        setId2((java.lang.Long)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case ID1:
      return getId1();

    case LINK_TYPE:
      return getLink_type();

    case ID2:
      return getId2();

    case TIME:
      return getTime();

    case DATA:
      return getData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case ID1:
      return isSetId1();
    case LINK_TYPE:
      return isSetLink_type();
    case ID2:
      return isSetId2();
    case TIME:
      return isSetTime();
    case DATA:
      return isSetData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TLink)
      return this.equals((TLink)that);
    return false;
  }

  public boolean equals(TLink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_id1 = true;
    boolean that_present_id1 = true;
    if (this_present_id1 || that_present_id1) {
      if (!(this_present_id1 && that_present_id1))
        return false;
      if (this.id1 != that.id1)
        return false;
    }

    boolean this_present_link_type = true;
    boolean that_present_link_type = true;
    if (this_present_link_type || that_present_link_type) {
      if (!(this_present_link_type && that_present_link_type))
        return false;
      if (this.link_type != that.link_type)
        return false;
    }

    boolean this_present_id2 = true;
    boolean that_present_id2 = true;
    if (this_present_id2 || that_present_id2) {
      if (!(this_present_id2 && that_present_id2))
        return false;
      if (this.id2 != that.id2)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(link_type);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id2);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId1()).compareTo(other.isSetId1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id1, other.id1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId2()).compareTo(other.isSetId2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id2, other.id2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLink(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id1:");
    sb.append(this.id1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("link_type:");
    sb.append(this.link_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id2:");
    sb.append(this.id2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLinkStandardScheme getScheme() {
      return new TLinkStandardScheme();
    }
  }

  private static class TLinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id1 = iprot.readI64();
              struct.setId1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LINK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.link_type = iprot.readI64();
              struct.setLink_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id2 = iprot.readI64();
              struct.setId2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID1_FIELD_DESC);
      oprot.writeI64(struct.id1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
      oprot.writeI64(struct.link_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID2_FIELD_DESC);
      oprot.writeI64(struct.id2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeString(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLinkTupleScheme getScheme() {
      return new TLinkTupleScheme();
    }
  }

  private static class TLinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetId1()) {
        optionals.set(1);
      }
      if (struct.isSetLink_type()) {
        optionals.set(2);
      }
      if (struct.isSetId2()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetId1()) {
        oprot.writeI64(struct.id1);
      }
      if (struct.isSetLink_type()) {
        oprot.writeI64(struct.link_type);
      }
      if (struct.isSetId2()) {
        oprot.writeI64(struct.id2);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetData()) {
        oprot.writeString(struct.data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id1 = iprot.readI64();
        struct.setId1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.link_type = iprot.readI64();
        struct.setLink_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id2 = iprot.readI64();
        struct.setId2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.data = iprot.readString();
        struct.setDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

