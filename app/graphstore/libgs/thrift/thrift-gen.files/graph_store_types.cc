/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "graph_store_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace graphstore {


TNode::~TNode() throw() {
}


void TNode::__set_id(const int64_t val) {
  this->id = val;
}

void TNode::__set_type(const int64_t val) {
  this->type = val;
}

void TNode::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t TNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TNode");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TNode &a, TNode &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TNode::TNode(const TNode& other0) {
  id = other0.id;
  type = other0.type;
  data = other0.data;
  __isset = other0.__isset;
}
TNode& TNode::operator=(const TNode& other1) {
  id = other1.id;
  type = other1.type;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
void TNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TNode(";
  out << "id=" << to_string(id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


TLink::~TLink() throw() {
}


void TLink::__set_version(const int64_t val) {
  this->version = val;
}

void TLink::__set_id1(const int64_t val) {
  this->id1 = val;
}

void TLink::__set_link_type(const int64_t val) {
  this->link_type = val;
}

void TLink::__set_id2(const int64_t val) {
  this->id2 = val;
}

void TLink::__set_time(const int64_t val) {
  this->time = val;
}

void TLink::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t TLink::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id1);
          this->__isset.id1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->link_type);
          this->__isset.link_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id2);
          this->__isset.id2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TLink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TLink");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id1", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("link_type", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->link_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id2", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->id2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TLink &a, TLink &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.id1, b.id1);
  swap(a.link_type, b.link_type);
  swap(a.id2, b.id2);
  swap(a.time, b.time);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TLink::TLink(const TLink& other2) {
  version = other2.version;
  id1 = other2.id1;
  link_type = other2.link_type;
  id2 = other2.id2;
  time = other2.time;
  data = other2.data;
  __isset = other2.__isset;
}
TLink& TLink::operator=(const TLink& other3) {
  version = other3.version;
  id1 = other3.id1;
  link_type = other3.link_type;
  id2 = other3.id2;
  time = other3.time;
  data = other3.data;
  __isset = other3.__isset;
  return *this;
}
void TLink::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TLink(";
  out << "version=" << to_string(version);
  out << ", " << "id1=" << to_string(id1);
  out << ", " << "link_type=" << to_string(link_type);
  out << ", " << "id2=" << to_string(id2);
  out << ", " << "time=" << to_string(time);
  out << ", " << "data=" << to_string(data);
  out << ")";
}

} // namespace
