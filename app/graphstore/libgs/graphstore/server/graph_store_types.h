/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graph_store_TYPES_H
#define graph_store_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace graphstore {

class TNode;

class TLink;

typedef struct _TNode__isset {
  _TNode__isset() : id(false), type(false), data(false) {}
  bool id :1;
  bool type :1;
  bool data :1;
} _TNode__isset;

class TNode : public virtual ::apache::thrift::TBase {
 public:

  TNode(const TNode&);
  TNode& operator=(const TNode&);
  TNode() : id(0), type(0), data() {
  }

  virtual ~TNode() throw();
  int64_t id;
  int64_t type;
  std::string data;

  _TNode__isset __isset;

  void __set_id(const int64_t val);

  void __set_type(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const TNode & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TNode &a, TNode &b);

inline std::ostream& operator<<(std::ostream& out, const TNode& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TLink__isset {
  _TLink__isset() : version(false), id1(false), link_type(false), id2(false), time(false), data(false) {}
  bool version :1;
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
  bool time :1;
  bool data :1;
} _TLink__isset;

class TLink : public virtual ::apache::thrift::TBase {
 public:

  TLink(const TLink&);
  TLink& operator=(const TLink&);
  TLink() : version(0), id1(0), link_type(0), id2(0), time(0), data() {
  }

  virtual ~TLink() throw();
  int64_t version;
  int64_t id1;
  int64_t link_type;
  int64_t id2;
  int64_t time;
  std::string data;

  _TLink__isset __isset;

  void __set_version(const int64_t val);

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  void __set_time(const int64_t val);

  void __set_data(const std::string& val);

  bool operator == (const TLink & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TLink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TLink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TLink &a, TLink &b);

inline std::ostream& operator<<(std::ostream& out, const TLink& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
