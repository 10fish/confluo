/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphStoreService_H
#define GraphStoreService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "graph_store_types.h"

namespace graphstore {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GraphStoreServiceIf {
 public:
  virtual ~GraphStoreServiceIf() {}
  virtual int64_t add_node(const TNode& n) = 0;
  virtual void get_node(TNode& _return, const int64_t type, const int64_t id) = 0;
  virtual bool update_node(const TNode& n) = 0;
  virtual bool delete_node(const int64_t type, const int64_t id) = 0;
  virtual bool add_link(const TLink& a) = 0;
  virtual bool update_link(const TLink& a) = 0;
  virtual bool delete_link(const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual void get_link(TLink& _return, const int64_t id1, const int64_t link_type, const int64_t id2) = 0;
  virtual void multiget_link(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s) = 0;
  virtual void get_link_list(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type) = 0;
  virtual void get_link_list_range(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit) = 0;
  virtual int64_t count_links(const int64_t id1, const int64_t link_type) = 0;
};

class GraphStoreServiceIfFactory {
 public:
  typedef GraphStoreServiceIf Handler;

  virtual ~GraphStoreServiceIfFactory() {}

  virtual GraphStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphStoreServiceIf* /* handler */) = 0;
};

class GraphStoreServiceIfSingletonFactory : virtual public GraphStoreServiceIfFactory {
 public:
  GraphStoreServiceIfSingletonFactory(const boost::shared_ptr<GraphStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~GraphStoreServiceIfSingletonFactory() {}

  virtual GraphStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GraphStoreServiceIf> iface_;
};

class GraphStoreServiceNull : virtual public GraphStoreServiceIf {
 public:
  virtual ~GraphStoreServiceNull() {}
  int64_t add_node(const TNode& /* n */) {
    int64_t _return = 0;
    return _return;
  }
  void get_node(TNode& /* _return */, const int64_t /* type */, const int64_t /* id */) {
    return;
  }
  bool update_node(const TNode& /* n */) {
    bool _return = false;
    return _return;
  }
  bool delete_node(const int64_t /* type */, const int64_t /* id */) {
    bool _return = false;
    return _return;
  }
  bool add_link(const TLink& /* a */) {
    bool _return = false;
    return _return;
  }
  bool update_link(const TLink& /* a */) {
    bool _return = false;
    return _return;
  }
  bool delete_link(const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    bool _return = false;
    return _return;
  }
  void get_link(TLink& /* _return */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* id2 */) {
    return;
  }
  void multiget_link(std::vector<TLink> & /* _return */, const int64_t /* id1 */, const int64_t /* link_type */, const std::set<int64_t> & /* id2s */) {
    return;
  }
  void get_link_list(std::vector<TLink> & /* _return */, const int64_t /* id1 */, const int64_t /* link_type */) {
    return;
  }
  void get_link_list_range(std::vector<TLink> & /* _return */, const int64_t /* id1 */, const int64_t /* link_type */, const int64_t /* min_ts */, const int64_t /* max_ts */, const int64_t /* off */, const int64_t /* limit */) {
    return;
  }
  int64_t count_links(const int64_t /* id1 */, const int64_t /* link_type */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _GraphStoreService_add_node_args__isset {
  _GraphStoreService_add_node_args__isset() : n(false) {}
  bool n :1;
} _GraphStoreService_add_node_args__isset;

class GraphStoreService_add_node_args {
 public:

  GraphStoreService_add_node_args(const GraphStoreService_add_node_args&);
  GraphStoreService_add_node_args& operator=(const GraphStoreService_add_node_args&);
  GraphStoreService_add_node_args() {
  }

  virtual ~GraphStoreService_add_node_args() throw();
  TNode n;

  _GraphStoreService_add_node_args__isset __isset;

  void __set_n(const TNode& val);

  bool operator == (const GraphStoreService_add_node_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_add_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_add_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_add_node_pargs {
 public:


  virtual ~GraphStoreService_add_node_pargs() throw();
  const TNode* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_add_node_result__isset {
  _GraphStoreService_add_node_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_add_node_result__isset;

class GraphStoreService_add_node_result {
 public:

  GraphStoreService_add_node_result(const GraphStoreService_add_node_result&);
  GraphStoreService_add_node_result& operator=(const GraphStoreService_add_node_result&);
  GraphStoreService_add_node_result() : success(0) {
  }

  virtual ~GraphStoreService_add_node_result() throw();
  int64_t success;

  _GraphStoreService_add_node_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphStoreService_add_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_add_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_add_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_add_node_presult__isset {
  _GraphStoreService_add_node_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_add_node_presult__isset;

class GraphStoreService_add_node_presult {
 public:


  virtual ~GraphStoreService_add_node_presult() throw();
  int64_t* success;

  _GraphStoreService_add_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_get_node_args__isset {
  _GraphStoreService_get_node_args__isset() : type(false), id(false) {}
  bool type :1;
  bool id :1;
} _GraphStoreService_get_node_args__isset;

class GraphStoreService_get_node_args {
 public:

  GraphStoreService_get_node_args(const GraphStoreService_get_node_args&);
  GraphStoreService_get_node_args& operator=(const GraphStoreService_get_node_args&);
  GraphStoreService_get_node_args() : type(0), id(0) {
  }

  virtual ~GraphStoreService_get_node_args() throw();
  int64_t type;
  int64_t id;

  _GraphStoreService_get_node_args__isset __isset;

  void __set_type(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const GraphStoreService_get_node_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_get_node_pargs {
 public:


  virtual ~GraphStoreService_get_node_pargs() throw();
  const int64_t* type;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_node_result__isset {
  _GraphStoreService_get_node_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_node_result__isset;

class GraphStoreService_get_node_result {
 public:

  GraphStoreService_get_node_result(const GraphStoreService_get_node_result&);
  GraphStoreService_get_node_result& operator=(const GraphStoreService_get_node_result&);
  GraphStoreService_get_node_result() {
  }

  virtual ~GraphStoreService_get_node_result() throw();
  TNode success;

  _GraphStoreService_get_node_result__isset __isset;

  void __set_success(const TNode& val);

  bool operator == (const GraphStoreService_get_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_node_presult__isset {
  _GraphStoreService_get_node_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_node_presult__isset;

class GraphStoreService_get_node_presult {
 public:


  virtual ~GraphStoreService_get_node_presult() throw();
  TNode* success;

  _GraphStoreService_get_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_update_node_args__isset {
  _GraphStoreService_update_node_args__isset() : n(false) {}
  bool n :1;
} _GraphStoreService_update_node_args__isset;

class GraphStoreService_update_node_args {
 public:

  GraphStoreService_update_node_args(const GraphStoreService_update_node_args&);
  GraphStoreService_update_node_args& operator=(const GraphStoreService_update_node_args&);
  GraphStoreService_update_node_args() {
  }

  virtual ~GraphStoreService_update_node_args() throw();
  TNode n;

  _GraphStoreService_update_node_args__isset __isset;

  void __set_n(const TNode& val);

  bool operator == (const GraphStoreService_update_node_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_update_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_update_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_update_node_pargs {
 public:


  virtual ~GraphStoreService_update_node_pargs() throw();
  const TNode* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_update_node_result__isset {
  _GraphStoreService_update_node_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_update_node_result__isset;

class GraphStoreService_update_node_result {
 public:

  GraphStoreService_update_node_result(const GraphStoreService_update_node_result&);
  GraphStoreService_update_node_result& operator=(const GraphStoreService_update_node_result&);
  GraphStoreService_update_node_result() : success(0) {
  }

  virtual ~GraphStoreService_update_node_result() throw();
  bool success;

  _GraphStoreService_update_node_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphStoreService_update_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_update_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_update_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_update_node_presult__isset {
  _GraphStoreService_update_node_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_update_node_presult__isset;

class GraphStoreService_update_node_presult {
 public:


  virtual ~GraphStoreService_update_node_presult() throw();
  bool* success;

  _GraphStoreService_update_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_delete_node_args__isset {
  _GraphStoreService_delete_node_args__isset() : type(false), id(false) {}
  bool type :1;
  bool id :1;
} _GraphStoreService_delete_node_args__isset;

class GraphStoreService_delete_node_args {
 public:

  GraphStoreService_delete_node_args(const GraphStoreService_delete_node_args&);
  GraphStoreService_delete_node_args& operator=(const GraphStoreService_delete_node_args&);
  GraphStoreService_delete_node_args() : type(0), id(0) {
  }

  virtual ~GraphStoreService_delete_node_args() throw();
  int64_t type;
  int64_t id;

  _GraphStoreService_delete_node_args__isset __isset;

  void __set_type(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const GraphStoreService_delete_node_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_delete_node_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_delete_node_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_delete_node_pargs {
 public:


  virtual ~GraphStoreService_delete_node_pargs() throw();
  const int64_t* type;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_delete_node_result__isset {
  _GraphStoreService_delete_node_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_delete_node_result__isset;

class GraphStoreService_delete_node_result {
 public:

  GraphStoreService_delete_node_result(const GraphStoreService_delete_node_result&);
  GraphStoreService_delete_node_result& operator=(const GraphStoreService_delete_node_result&);
  GraphStoreService_delete_node_result() : success(0) {
  }

  virtual ~GraphStoreService_delete_node_result() throw();
  bool success;

  _GraphStoreService_delete_node_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphStoreService_delete_node_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_delete_node_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_delete_node_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_delete_node_presult__isset {
  _GraphStoreService_delete_node_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_delete_node_presult__isset;

class GraphStoreService_delete_node_presult {
 public:


  virtual ~GraphStoreService_delete_node_presult() throw();
  bool* success;

  _GraphStoreService_delete_node_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_add_link_args__isset {
  _GraphStoreService_add_link_args__isset() : a(false) {}
  bool a :1;
} _GraphStoreService_add_link_args__isset;

class GraphStoreService_add_link_args {
 public:

  GraphStoreService_add_link_args(const GraphStoreService_add_link_args&);
  GraphStoreService_add_link_args& operator=(const GraphStoreService_add_link_args&);
  GraphStoreService_add_link_args() {
  }

  virtual ~GraphStoreService_add_link_args() throw();
  TLink a;

  _GraphStoreService_add_link_args__isset __isset;

  void __set_a(const TLink& val);

  bool operator == (const GraphStoreService_add_link_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_add_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_add_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_add_link_pargs {
 public:


  virtual ~GraphStoreService_add_link_pargs() throw();
  const TLink* a;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_add_link_result__isset {
  _GraphStoreService_add_link_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_add_link_result__isset;

class GraphStoreService_add_link_result {
 public:

  GraphStoreService_add_link_result(const GraphStoreService_add_link_result&);
  GraphStoreService_add_link_result& operator=(const GraphStoreService_add_link_result&);
  GraphStoreService_add_link_result() : success(0) {
  }

  virtual ~GraphStoreService_add_link_result() throw();
  bool success;

  _GraphStoreService_add_link_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphStoreService_add_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_add_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_add_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_add_link_presult__isset {
  _GraphStoreService_add_link_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_add_link_presult__isset;

class GraphStoreService_add_link_presult {
 public:


  virtual ~GraphStoreService_add_link_presult() throw();
  bool* success;

  _GraphStoreService_add_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_update_link_args__isset {
  _GraphStoreService_update_link_args__isset() : a(false) {}
  bool a :1;
} _GraphStoreService_update_link_args__isset;

class GraphStoreService_update_link_args {
 public:

  GraphStoreService_update_link_args(const GraphStoreService_update_link_args&);
  GraphStoreService_update_link_args& operator=(const GraphStoreService_update_link_args&);
  GraphStoreService_update_link_args() {
  }

  virtual ~GraphStoreService_update_link_args() throw();
  TLink a;

  _GraphStoreService_update_link_args__isset __isset;

  void __set_a(const TLink& val);

  bool operator == (const GraphStoreService_update_link_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_update_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_update_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_update_link_pargs {
 public:


  virtual ~GraphStoreService_update_link_pargs() throw();
  const TLink* a;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_update_link_result__isset {
  _GraphStoreService_update_link_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_update_link_result__isset;

class GraphStoreService_update_link_result {
 public:

  GraphStoreService_update_link_result(const GraphStoreService_update_link_result&);
  GraphStoreService_update_link_result& operator=(const GraphStoreService_update_link_result&);
  GraphStoreService_update_link_result() : success(0) {
  }

  virtual ~GraphStoreService_update_link_result() throw();
  bool success;

  _GraphStoreService_update_link_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphStoreService_update_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_update_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_update_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_update_link_presult__isset {
  _GraphStoreService_update_link_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_update_link_presult__isset;

class GraphStoreService_update_link_presult {
 public:


  virtual ~GraphStoreService_update_link_presult() throw();
  bool* success;

  _GraphStoreService_update_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_delete_link_args__isset {
  _GraphStoreService_delete_link_args__isset() : id1(false), link_type(false), id2(false) {}
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphStoreService_delete_link_args__isset;

class GraphStoreService_delete_link_args {
 public:

  GraphStoreService_delete_link_args(const GraphStoreService_delete_link_args&);
  GraphStoreService_delete_link_args& operator=(const GraphStoreService_delete_link_args&);
  GraphStoreService_delete_link_args() : id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphStoreService_delete_link_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphStoreService_delete_link_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphStoreService_delete_link_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_delete_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_delete_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_delete_link_pargs {
 public:


  virtual ~GraphStoreService_delete_link_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_delete_link_result__isset {
  _GraphStoreService_delete_link_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_delete_link_result__isset;

class GraphStoreService_delete_link_result {
 public:

  GraphStoreService_delete_link_result(const GraphStoreService_delete_link_result&);
  GraphStoreService_delete_link_result& operator=(const GraphStoreService_delete_link_result&);
  GraphStoreService_delete_link_result() : success(0) {
  }

  virtual ~GraphStoreService_delete_link_result() throw();
  bool success;

  _GraphStoreService_delete_link_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GraphStoreService_delete_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_delete_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_delete_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_delete_link_presult__isset {
  _GraphStoreService_delete_link_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_delete_link_presult__isset;

class GraphStoreService_delete_link_presult {
 public:


  virtual ~GraphStoreService_delete_link_presult() throw();
  bool* success;

  _GraphStoreService_delete_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_get_link_args__isset {
  _GraphStoreService_get_link_args__isset() : id1(false), link_type(false), id2(false) {}
  bool id1 :1;
  bool link_type :1;
  bool id2 :1;
} _GraphStoreService_get_link_args__isset;

class GraphStoreService_get_link_args {
 public:

  GraphStoreService_get_link_args(const GraphStoreService_get_link_args&);
  GraphStoreService_get_link_args& operator=(const GraphStoreService_get_link_args&);
  GraphStoreService_get_link_args() : id1(0), link_type(0), id2(0) {
  }

  virtual ~GraphStoreService_get_link_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t id2;

  _GraphStoreService_get_link_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphStoreService_get_link_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_get_link_pargs {
 public:


  virtual ~GraphStoreService_get_link_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_result__isset {
  _GraphStoreService_get_link_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_result__isset;

class GraphStoreService_get_link_result {
 public:

  GraphStoreService_get_link_result(const GraphStoreService_get_link_result&);
  GraphStoreService_get_link_result& operator=(const GraphStoreService_get_link_result&);
  GraphStoreService_get_link_result() {
  }

  virtual ~GraphStoreService_get_link_result() throw();
  TLink success;

  _GraphStoreService_get_link_result__isset __isset;

  void __set_success(const TLink& val);

  bool operator == (const GraphStoreService_get_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_presult__isset {
  _GraphStoreService_get_link_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_presult__isset;

class GraphStoreService_get_link_presult {
 public:


  virtual ~GraphStoreService_get_link_presult() throw();
  TLink* success;

  _GraphStoreService_get_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_multiget_link_args__isset {
  _GraphStoreService_multiget_link_args__isset() : id1(false), link_type(false), id2s(false) {}
  bool id1 :1;
  bool link_type :1;
  bool id2s :1;
} _GraphStoreService_multiget_link_args__isset;

class GraphStoreService_multiget_link_args {
 public:

  GraphStoreService_multiget_link_args(const GraphStoreService_multiget_link_args&);
  GraphStoreService_multiget_link_args& operator=(const GraphStoreService_multiget_link_args&);
  GraphStoreService_multiget_link_args() : id1(0), link_type(0) {
  }

  virtual ~GraphStoreService_multiget_link_args() throw();
  int64_t id1;
  int64_t link_type;
  std::set<int64_t>  id2s;

  _GraphStoreService_multiget_link_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_id2s(const std::set<int64_t> & val);

  bool operator == (const GraphStoreService_multiget_link_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(id2s == rhs.id2s))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_multiget_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_multiget_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_multiget_link_pargs {
 public:


  virtual ~GraphStoreService_multiget_link_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const std::set<int64_t> * id2s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_multiget_link_result__isset {
  _GraphStoreService_multiget_link_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_multiget_link_result__isset;

class GraphStoreService_multiget_link_result {
 public:

  GraphStoreService_multiget_link_result(const GraphStoreService_multiget_link_result&);
  GraphStoreService_multiget_link_result& operator=(const GraphStoreService_multiget_link_result&);
  GraphStoreService_multiget_link_result() {
  }

  virtual ~GraphStoreService_multiget_link_result() throw();
  std::vector<TLink>  success;

  _GraphStoreService_multiget_link_result__isset __isset;

  void __set_success(const std::vector<TLink> & val);

  bool operator == (const GraphStoreService_multiget_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_multiget_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_multiget_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_multiget_link_presult__isset {
  _GraphStoreService_multiget_link_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_multiget_link_presult__isset;

class GraphStoreService_multiget_link_presult {
 public:


  virtual ~GraphStoreService_multiget_link_presult() throw();
  std::vector<TLink> * success;

  _GraphStoreService_multiget_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_get_link_list_args__isset {
  _GraphStoreService_get_link_list_args__isset() : id1(false), link_type(false) {}
  bool id1 :1;
  bool link_type :1;
} _GraphStoreService_get_link_list_args__isset;

class GraphStoreService_get_link_list_args {
 public:

  GraphStoreService_get_link_list_args(const GraphStoreService_get_link_list_args&);
  GraphStoreService_get_link_list_args& operator=(const GraphStoreService_get_link_list_args&);
  GraphStoreService_get_link_list_args() : id1(0), link_type(0) {
  }

  virtual ~GraphStoreService_get_link_list_args() throw();
  int64_t id1;
  int64_t link_type;

  _GraphStoreService_get_link_list_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  bool operator == (const GraphStoreService_get_link_list_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_get_link_list_pargs {
 public:


  virtual ~GraphStoreService_get_link_list_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_list_result__isset {
  _GraphStoreService_get_link_list_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_list_result__isset;

class GraphStoreService_get_link_list_result {
 public:

  GraphStoreService_get_link_list_result(const GraphStoreService_get_link_list_result&);
  GraphStoreService_get_link_list_result& operator=(const GraphStoreService_get_link_list_result&);
  GraphStoreService_get_link_list_result() {
  }

  virtual ~GraphStoreService_get_link_list_result() throw();
  std::vector<TLink>  success;

  _GraphStoreService_get_link_list_result__isset __isset;

  void __set_success(const std::vector<TLink> & val);

  bool operator == (const GraphStoreService_get_link_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_list_presult__isset {
  _GraphStoreService_get_link_list_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_list_presult__isset;

class GraphStoreService_get_link_list_presult {
 public:


  virtual ~GraphStoreService_get_link_list_presult() throw();
  std::vector<TLink> * success;

  _GraphStoreService_get_link_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_get_link_list_range_args__isset {
  _GraphStoreService_get_link_list_range_args__isset() : id1(false), link_type(false), min_ts(false), max_ts(false), off(false), limit(false) {}
  bool id1 :1;
  bool link_type :1;
  bool min_ts :1;
  bool max_ts :1;
  bool off :1;
  bool limit :1;
} _GraphStoreService_get_link_list_range_args__isset;

class GraphStoreService_get_link_list_range_args {
 public:

  GraphStoreService_get_link_list_range_args(const GraphStoreService_get_link_list_range_args&);
  GraphStoreService_get_link_list_range_args& operator=(const GraphStoreService_get_link_list_range_args&);
  GraphStoreService_get_link_list_range_args() : id1(0), link_type(0), min_ts(0), max_ts(0), off(0), limit(0) {
  }

  virtual ~GraphStoreService_get_link_list_range_args() throw();
  int64_t id1;
  int64_t link_type;
  int64_t min_ts;
  int64_t max_ts;
  int64_t off;
  int64_t limit;

  _GraphStoreService_get_link_list_range_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  void __set_min_ts(const int64_t val);

  void __set_max_ts(const int64_t val);

  void __set_off(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const GraphStoreService_get_link_list_range_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    if (!(min_ts == rhs.min_ts))
      return false;
    if (!(max_ts == rhs.max_ts))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_list_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_list_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_get_link_list_range_pargs {
 public:


  virtual ~GraphStoreService_get_link_list_range_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;
  const int64_t* min_ts;
  const int64_t* max_ts;
  const int64_t* off;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_list_range_result__isset {
  _GraphStoreService_get_link_list_range_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_list_range_result__isset;

class GraphStoreService_get_link_list_range_result {
 public:

  GraphStoreService_get_link_list_range_result(const GraphStoreService_get_link_list_range_result&);
  GraphStoreService_get_link_list_range_result& operator=(const GraphStoreService_get_link_list_range_result&);
  GraphStoreService_get_link_list_range_result() {
  }

  virtual ~GraphStoreService_get_link_list_range_result() throw();
  std::vector<TLink>  success;

  _GraphStoreService_get_link_list_range_result__isset __isset;

  void __set_success(const std::vector<TLink> & val);

  bool operator == (const GraphStoreService_get_link_list_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_get_link_list_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_get_link_list_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_get_link_list_range_presult__isset {
  _GraphStoreService_get_link_list_range_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_get_link_list_range_presult__isset;

class GraphStoreService_get_link_list_range_presult {
 public:


  virtual ~GraphStoreService_get_link_list_range_presult() throw();
  std::vector<TLink> * success;

  _GraphStoreService_get_link_list_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GraphStoreService_count_links_args__isset {
  _GraphStoreService_count_links_args__isset() : id1(false), link_type(false) {}
  bool id1 :1;
  bool link_type :1;
} _GraphStoreService_count_links_args__isset;

class GraphStoreService_count_links_args {
 public:

  GraphStoreService_count_links_args(const GraphStoreService_count_links_args&);
  GraphStoreService_count_links_args& operator=(const GraphStoreService_count_links_args&);
  GraphStoreService_count_links_args() : id1(0), link_type(0) {
  }

  virtual ~GraphStoreService_count_links_args() throw();
  int64_t id1;
  int64_t link_type;

  _GraphStoreService_count_links_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_link_type(const int64_t val);

  bool operator == (const GraphStoreService_count_links_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(link_type == rhs.link_type))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_count_links_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_count_links_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphStoreService_count_links_pargs {
 public:


  virtual ~GraphStoreService_count_links_pargs() throw();
  const int64_t* id1;
  const int64_t* link_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_count_links_result__isset {
  _GraphStoreService_count_links_result__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_count_links_result__isset;

class GraphStoreService_count_links_result {
 public:

  GraphStoreService_count_links_result(const GraphStoreService_count_links_result&);
  GraphStoreService_count_links_result& operator=(const GraphStoreService_count_links_result&);
  GraphStoreService_count_links_result() : success(0) {
  }

  virtual ~GraphStoreService_count_links_result() throw();
  int64_t success;

  _GraphStoreService_count_links_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphStoreService_count_links_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphStoreService_count_links_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphStoreService_count_links_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphStoreService_count_links_presult__isset {
  _GraphStoreService_count_links_presult__isset() : success(false) {}
  bool success :1;
} _GraphStoreService_count_links_presult__isset;

class GraphStoreService_count_links_presult {
 public:


  virtual ~GraphStoreService_count_links_presult() throw();
  int64_t* success;

  _GraphStoreService_count_links_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GraphStoreServiceClient : virtual public GraphStoreServiceIf {
 public:
  GraphStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t add_node(const TNode& n);
  void send_add_node(const TNode& n);
  int64_t recv_add_node();
  void get_node(TNode& _return, const int64_t type, const int64_t id);
  void send_get_node(const int64_t type, const int64_t id);
  void recv_get_node(TNode& _return);
  bool update_node(const TNode& n);
  void send_update_node(const TNode& n);
  bool recv_update_node();
  bool delete_node(const int64_t type, const int64_t id);
  void send_delete_node(const int64_t type, const int64_t id);
  bool recv_delete_node();
  bool add_link(const TLink& a);
  void send_add_link(const TLink& a);
  bool recv_add_link();
  bool update_link(const TLink& a);
  void send_update_link(const TLink& a);
  bool recv_update_link();
  bool delete_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_delete_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_delete_link();
  void get_link(TLink& _return, const int64_t id1, const int64_t link_type, const int64_t id2);
  void send_get_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_get_link(TLink& _return);
  void multiget_link(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s);
  void send_multiget_link(const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s);
  void recv_multiget_link(std::vector<TLink> & _return);
  void get_link_list(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type);
  void send_get_link_list(const int64_t id1, const int64_t link_type);
  void recv_get_link_list(std::vector<TLink> & _return);
  void get_link_list_range(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit);
  void send_get_link_list_range(const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit);
  void recv_get_link_list_range(std::vector<TLink> & _return);
  int64_t count_links(const int64_t id1, const int64_t link_type);
  void send_count_links(const int64_t id1, const int64_t link_type);
  int64_t recv_count_links();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GraphStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_node(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiget_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_list_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count_links(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphStoreServiceProcessor(boost::shared_ptr<GraphStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add_node"] = &GraphStoreServiceProcessor::process_add_node;
    processMap_["get_node"] = &GraphStoreServiceProcessor::process_get_node;
    processMap_["update_node"] = &GraphStoreServiceProcessor::process_update_node;
    processMap_["delete_node"] = &GraphStoreServiceProcessor::process_delete_node;
    processMap_["add_link"] = &GraphStoreServiceProcessor::process_add_link;
    processMap_["update_link"] = &GraphStoreServiceProcessor::process_update_link;
    processMap_["delete_link"] = &GraphStoreServiceProcessor::process_delete_link;
    processMap_["get_link"] = &GraphStoreServiceProcessor::process_get_link;
    processMap_["multiget_link"] = &GraphStoreServiceProcessor::process_multiget_link;
    processMap_["get_link_list"] = &GraphStoreServiceProcessor::process_get_link_list;
    processMap_["get_link_list_range"] = &GraphStoreServiceProcessor::process_get_link_list_range;
    processMap_["count_links"] = &GraphStoreServiceProcessor::process_count_links;
  }

  virtual ~GraphStoreServiceProcessor() {}
};

class GraphStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphStoreServiceProcessorFactory(const ::boost::shared_ptr< GraphStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GraphStoreServiceIfFactory > handlerFactory_;
};

class GraphStoreServiceMultiface : virtual public GraphStoreServiceIf {
 public:
  GraphStoreServiceMultiface(std::vector<boost::shared_ptr<GraphStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GraphStoreServiceIf> > ifaces_;
  GraphStoreServiceMultiface() {}
  void add(boost::shared_ptr<GraphStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t add_node(const TNode& n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_node(n);
    }
    return ifaces_[i]->add_node(n);
  }

  void get_node(TNode& _return, const int64_t type, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_node(_return, type, id);
    }
    ifaces_[i]->get_node(_return, type, id);
    return;
  }

  bool update_node(const TNode& n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_node(n);
    }
    return ifaces_[i]->update_node(n);
  }

  bool delete_node(const int64_t type, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_node(type, id);
    }
    return ifaces_[i]->delete_node(type, id);
  }

  bool add_link(const TLink& a) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_link(a);
    }
    return ifaces_[i]->add_link(a);
  }

  bool update_link(const TLink& a) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_link(a);
    }
    return ifaces_[i]->update_link(a);
  }

  bool delete_link(const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_link(id1, link_type, id2);
    }
    return ifaces_[i]->delete_link(id1, link_type, id2);
  }

  void get_link(TLink& _return, const int64_t id1, const int64_t link_type, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link(_return, id1, link_type, id2);
    }
    ifaces_[i]->get_link(_return, id1, link_type, id2);
    return;
  }

  void multiget_link(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiget_link(_return, id1, link_type, id2s);
    }
    ifaces_[i]->multiget_link(_return, id1, link_type, id2s);
    return;
  }

  void get_link_list(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_list(_return, id1, link_type);
    }
    ifaces_[i]->get_link_list(_return, id1, link_type);
    return;
  }

  void get_link_list_range(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_list_range(_return, id1, link_type, min_ts, max_ts, off, limit);
    }
    ifaces_[i]->get_link_list_range(_return, id1, link_type, min_ts, max_ts, off, limit);
    return;
  }

  int64_t count_links(const int64_t id1, const int64_t link_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count_links(id1, link_type);
    }
    return ifaces_[i]->count_links(id1, link_type);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GraphStoreServiceConcurrentClient : virtual public GraphStoreServiceIf {
 public:
  GraphStoreServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphStoreServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t add_node(const TNode& n);
  int32_t send_add_node(const TNode& n);
  int64_t recv_add_node(const int32_t seqid);
  void get_node(TNode& _return, const int64_t type, const int64_t id);
  int32_t send_get_node(const int64_t type, const int64_t id);
  void recv_get_node(TNode& _return, const int32_t seqid);
  bool update_node(const TNode& n);
  int32_t send_update_node(const TNode& n);
  bool recv_update_node(const int32_t seqid);
  bool delete_node(const int64_t type, const int64_t id);
  int32_t send_delete_node(const int64_t type, const int64_t id);
  bool recv_delete_node(const int32_t seqid);
  bool add_link(const TLink& a);
  int32_t send_add_link(const TLink& a);
  bool recv_add_link(const int32_t seqid);
  bool update_link(const TLink& a);
  int32_t send_update_link(const TLink& a);
  bool recv_update_link(const int32_t seqid);
  bool delete_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_delete_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  bool recv_delete_link(const int32_t seqid);
  void get_link(TLink& _return, const int64_t id1, const int64_t link_type, const int64_t id2);
  int32_t send_get_link(const int64_t id1, const int64_t link_type, const int64_t id2);
  void recv_get_link(TLink& _return, const int32_t seqid);
  void multiget_link(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s);
  int32_t send_multiget_link(const int64_t id1, const int64_t link_type, const std::set<int64_t> & id2s);
  void recv_multiget_link(std::vector<TLink> & _return, const int32_t seqid);
  void get_link_list(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type);
  int32_t send_get_link_list(const int64_t id1, const int64_t link_type);
  void recv_get_link_list(std::vector<TLink> & _return, const int32_t seqid);
  void get_link_list_range(std::vector<TLink> & _return, const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit);
  int32_t send_get_link_list_range(const int64_t id1, const int64_t link_type, const int64_t min_ts, const int64_t max_ts, const int64_t off, const int64_t limit);
  void recv_get_link_list_range(std::vector<TLink> & _return, const int32_t seqid);
  int64_t count_links(const int64_t id1, const int64_t link_type);
  int32_t send_count_links(const int64_t id1, const int64_t link_type);
  int64_t recv_count_links(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
